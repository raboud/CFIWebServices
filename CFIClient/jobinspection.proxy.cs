// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------




[System.ServiceModel.ServiceContractAttribute(Namespace="http://tempuri.org/")]
public interface IJobInspection {
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/Echo", ReplyAction="http://tempuri.org/IJobInspection/EchoResponse")]
    string Echo(string accessToken, string returnThis);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/Echo", ReplyAction="http://tempuri.org/IJobInspection/EchoResponse", AsyncPattern=true)]
    System.IAsyncResult BeginEcho(string accessToken, string returnThis, System.AsyncCallback asyncCallback, object userState);
    
    string EndEcho(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDs", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsResponse")]
    int[] GetOrderIDs(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDs", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrderIDs(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState);
    
    int[] EndGetOrderIDs(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByCustomerLastName", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByCustomerLastNameResponse")]
    int[] GetOrderIDsByCustomerLastName(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByCustomerLastName", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByCustomerLastNameResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrderIDsByCustomerLastName(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState);
    
    int[] EndGetOrderIDsByCustomerLastName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByDateRange", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByDateRangeResponse")]
    int[] GetOrderIDsByDateRange(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByDateRange", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByDateRangeResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrderIDsByDateRange(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState);
    
    int[] EndGetOrderIDsByDateRange(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByStoreNumber", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByStoreNumberResponse")]
    int[] GetOrderIDsByStoreNumber(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByStoreNumber", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByStoreNumberResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrderIDsByStoreNumber(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState);
    
    int[] EndGetOrderIDsByStoreNumber(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByMultipleCriteria", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByMultipleCriteriaResponse")]
    int[] GetOrderIDsByMultipleCriteria(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderIDsByMultipleCriteria", ReplyAction="http://tempuri.org/IJobInspection/GetOrderIDsByMultipleCriteriaResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrderIDsByMultipleCriteria(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState);
    
    int[] EndGetOrderIDsByMultipleCriteria(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrdersByPONumber", ReplyAction="http://tempuri.org/IJobInspection/GetOrdersByPONumberResponse")]
    int[] GetOrdersByPONumber(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrdersByPONumber", ReplyAction="http://tempuri.org/IJobInspection/GetOrdersByPONumberResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrdersByPONumber(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState);
    
    int[] EndGetOrdersByPONumber(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderByID", ReplyAction="http://tempuri.org/IJobInspection/GetOrderByIDResponse")]
    CFI.OrderInfo GetOrderByID(string accessToken, int ID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetOrderByID", ReplyAction="http://tempuri.org/IJobInspection/GetOrderByIDResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetOrderByID(string accessToken, int ID, System.AsyncCallback asyncCallback, object userState);
    
    CFI.OrderInfo EndGetOrderByID(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetAllNoteTypes", ReplyAction="http://tempuri.org/IJobInspection/GetAllNoteTypesResponse")]
    string GetAllNoteTypes(string accessToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetAllNoteTypes", ReplyAction="http://tempuri.org/IJobInspection/GetAllNoteTypesResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetAllNoteTypes(string accessToken, System.AsyncCallback asyncCallback, object userState);
    
    string EndGetAllNoteTypes(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/AddNote", ReplyAction="http://tempuri.org/IJobInspection/AddNoteResponse")]
    bool AddNote(string accessToken, int orderID, CFI.NoteInfo note);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/AddNote", ReplyAction="http://tempuri.org/IJobInspection/AddNoteResponse", AsyncPattern=true)]
    System.IAsyncResult BeginAddNote(string accessToken, int orderID, CFI.NoteInfo note, System.AsyncCallback asyncCallback, object userState);
    
    bool EndAddNote(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetNote", ReplyAction="http://tempuri.org/IJobInspection/GetNoteResponse")]
    CFI.NoteInfo GetNote(string accessToken, int noteID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetNote", ReplyAction="http://tempuri.org/IJobInspection/GetNoteResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetNote(string accessToken, int noteID, System.AsyncCallback asyncCallback, object userState);
    
    CFI.NoteInfo EndGetNote(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetNotes", ReplyAction="http://tempuri.org/IJobInspection/GetNotesResponse")]
    string GetNotes(string accessToken, int orderID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetNotes", ReplyAction="http://tempuri.org/IJobInspection/GetNotesResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetNotes(string accessToken, int orderID, System.AsyncCallback asyncCallback, object userState);
    
    string EndGetNotes(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UpdateNoteText", ReplyAction="http://tempuri.org/IJobInspection/UpdateNoteTextResponse")]
    bool UpdateNoteText(string accessToken, int noteID, string newText);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UpdateNoteText", ReplyAction="http://tempuri.org/IJobInspection/UpdateNoteTextResponse", AsyncPattern=true)]
    System.IAsyncResult BeginUpdateNoteText(string accessToken, int noteID, string newText, System.AsyncCallback asyncCallback, object userState);
    
    bool EndUpdateNoteText(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DeleteNote", ReplyAction="http://tempuri.org/IJobInspection/DeleteNoteResponse")]
    bool DeleteNote(string accessToken, int noteID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DeleteNote", ReplyAction="http://tempuri.org/IJobInspection/DeleteNoteResponse", AsyncPattern=true)]
    System.IAsyncResult BeginDeleteNote(string accessToken, int noteID, System.AsyncCallback asyncCallback, object userState);
    
    bool EndDeleteNote(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetAllUsers", ReplyAction="http://tempuri.org/IJobInspection/GetAllUsersResponse")]
    string GetAllUsers(string accessToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetAllUsers", ReplyAction="http://tempuri.org/IJobInspection/GetAllUsersResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetAllUsers(string accessToken, System.AsyncCallback asyncCallback, object userState);
    
    string EndGetAllUsers(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/AddPhoto", ReplyAction="http://tempuri.org/IJobInspection/AddPhotoResponse")]
    bool AddPhoto(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/AddPhoto", ReplyAction="http://tempuri.org/IJobInspection/AddPhotoResponse", AsyncPattern=true)]
    System.IAsyncResult BeginAddPhoto(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken, System.AsyncCallback asyncCallback, object userState);
    
    bool EndAddPhoto(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/QueuePhotoDownload", ReplyAction="http://tempuri.org/IJobInspection/QueuePhotoDownloadResponse")]
    string QueuePhotoDownload(string accessToken, int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/QueuePhotoDownload", ReplyAction="http://tempuri.org/IJobInspection/QueuePhotoDownloadResponse", AsyncPattern=true)]
    System.IAsyncResult BeginQueuePhotoDownload(string accessToken, int id, System.AsyncCallback asyncCallback, object userState);
    
    string EndQueuePhotoDownload(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetPhoto", ReplyAction="http://tempuri.org/IJobInspection/GetPhotoResponse")]
    CFI.PhotoInfo GetPhoto(string accessToken, int photoID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetPhoto", ReplyAction="http://tempuri.org/IJobInspection/GetPhotoResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetPhoto(string accessToken, int photoID, System.AsyncCallback asyncCallback, object userState);
    
    CFI.PhotoInfo EndGetPhoto(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetPhotos", ReplyAction="http://tempuri.org/IJobInspection/GetPhotosResponse")]
    string GetPhotos(string accessToken, int orderID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetPhotos", ReplyAction="http://tempuri.org/IJobInspection/GetPhotosResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetPhotos(string accessToken, int orderID, System.AsyncCallback asyncCallback, object userState);
    
    string EndGetPhotos(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DeletePhoto", ReplyAction="http://tempuri.org/IJobInspection/DeletePhotoResponse")]
    bool DeletePhoto(string accessToken, int photoID);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DeletePhoto", ReplyAction="http://tempuri.org/IJobInspection/DeletePhotoResponse", AsyncPattern=true)]
    System.IAsyncResult BeginDeletePhoto(string accessToken, int photoID, System.AsyncCallback asyncCallback, object userState);
    
    bool EndDeletePhoto(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/QueueDiagramDownload", ReplyAction="http://tempuri.org/IJobInspection/QueueDiagramDownloadResponse")]
    string QueueDiagramDownload(string accessToken, string diagramNumber);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/QueueDiagramDownload", ReplyAction="http://tempuri.org/IJobInspection/QueueDiagramDownloadResponse", AsyncPattern=true)]
    System.IAsyncResult BeginQueueDiagramDownload(string accessToken, string diagramNumber, System.AsyncCallback asyncCallback, object userState);
    
    string EndQueueDiagramDownload(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFileStart", ReplyAction="http://tempuri.org/IJobInspection/UploadFileStartResponse")]
    string UploadFileStart(string accessToken, int totalBytes, int chunkSize);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFileStart", ReplyAction="http://tempuri.org/IJobInspection/UploadFileStartResponse", AsyncPattern=true)]
    System.IAsyncResult BeginUploadFileStart(string accessToken, int totalBytes, int chunkSize, System.AsyncCallback asyncCallback, object userState);
    
    string EndUploadFileStart(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFilePart", ReplyAction="http://tempuri.org/IJobInspection/UploadFilePartResponse")]
    bool UploadFilePart(string accessToken, string transferToken, int chunkIndex, byte[] bytes);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFilePart", ReplyAction="http://tempuri.org/IJobInspection/UploadFilePartResponse", AsyncPattern=true)]
    System.IAsyncResult BeginUploadFilePart(string accessToken, string transferToken, int chunkIndex, byte[] bytes, System.AsyncCallback asyncCallback, object userState);
    
    bool EndUploadFilePart(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFileCancel", ReplyAction="http://tempuri.org/IJobInspection/UploadFileCancelResponse")]
    bool UploadFileCancel(string accessToken, string transferToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFileCancel", ReplyAction="http://tempuri.org/IJobInspection/UploadFileCancelResponse", AsyncPattern=true)]
    System.IAsyncResult BeginUploadFileCancel(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState);
    
    bool EndUploadFileCancel(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFileEnd", ReplyAction="http://tempuri.org/IJobInspection/UploadFileEndResponse")]
    bool UploadFileEnd(string accessToken, string transferToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/UploadFileEnd", ReplyAction="http://tempuri.org/IJobInspection/UploadFileEndResponse", AsyncPattern=true)]
    System.IAsyncResult BeginUploadFileEnd(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState);
    
    bool EndUploadFileEnd(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFileStart", ReplyAction="http://tempuri.org/IJobInspection/DownloadFileStartResponse")]
    int DownloadFileStart(string accessToken, string transferToken, int chunkSize);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFileStart", ReplyAction="http://tempuri.org/IJobInspection/DownloadFileStartResponse", AsyncPattern=true)]
    System.IAsyncResult BeginDownloadFileStart(string accessToken, string transferToken, int chunkSize, System.AsyncCallback asyncCallback, object userState);
    
    int EndDownloadFileStart(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFilePart", ReplyAction="http://tempuri.org/IJobInspection/DownloadFilePartResponse")]
    byte[] DownloadFilePart(string accessToken, string transferToken, int chunkIndex);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFilePart", ReplyAction="http://tempuri.org/IJobInspection/DownloadFilePartResponse", AsyncPattern=true)]
    System.IAsyncResult BeginDownloadFilePart(string accessToken, string transferToken, int chunkIndex, System.AsyncCallback asyncCallback, object userState);
    
    byte[] EndDownloadFilePart(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFileCancel", ReplyAction="http://tempuri.org/IJobInspection/DownloadFileCancelResponse")]
    bool DownloadFileCancel(string accessToken, string transferToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFileCancel", ReplyAction="http://tempuri.org/IJobInspection/DownloadFileCancelResponse", AsyncPattern=true)]
    System.IAsyncResult BeginDownloadFileCancel(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState);
    
    bool EndDownloadFileCancel(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFileEnd", ReplyAction="http://tempuri.org/IJobInspection/DownloadFileEndResponse")]
    bool DownloadFileEnd(string accessToken, string transferToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/DownloadFileEnd", ReplyAction="http://tempuri.org/IJobInspection/DownloadFileEndResponse", AsyncPattern=true)]
    System.IAsyncResult BeginDownloadFileEnd(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState);
    
    bool EndDownloadFileEnd(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetLogDirectoryNames", ReplyAction="http://tempuri.org/IJobInspection/GetLogDirectoryNamesResponse")]
    string[] GetLogDirectoryNames(string accessToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetLogDirectoryNames", ReplyAction="http://tempuri.org/IJobInspection/GetLogDirectoryNamesResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetLogDirectoryNames(string accessToken, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndGetLogDirectoryNames(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetCurrentLogDirectoryName", ReplyAction="http://tempuri.org/IJobInspection/GetCurrentLogDirectoryNameResponse")]
    string GetCurrentLogDirectoryName(string accessToken);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetCurrentLogDirectoryName", ReplyAction="http://tempuri.org/IJobInspection/GetCurrentLogDirectoryNameResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetCurrentLogDirectoryName(string accessToken, System.AsyncCallback asyncCallback, object userState);
    
    string EndGetCurrentLogDirectoryName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetLogFileNames", ReplyAction="http://tempuri.org/IJobInspection/GetLogFileNamesResponse")]
    string[] GetLogFileNames(string accessToken, string logDirectoryName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/GetLogFileNames", ReplyAction="http://tempuri.org/IJobInspection/GetLogFileNamesResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetLogFileNames(string accessToken, string logDirectoryName, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndGetLogFileNames(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/QueueLogFileDownload", ReplyAction="http://tempuri.org/IJobInspection/QueueLogFileDownloadResponse")]
    string QueueLogFileDownload(string accessToken, string directoryName, string fileName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobInspection/QueueLogFileDownload", ReplyAction="http://tempuri.org/IJobInspection/QueueLogFileDownloadResponse", AsyncPattern=true)]
    System.IAsyncResult BeginQueueLogFileDownload(string accessToken, string directoryName, string fileName, System.AsyncCallback asyncCallback, object userState);
    
    string EndQueueLogFileDownload(System.IAsyncResult result);
}

public interface IJobInspectionChannel {
}

public class JobInspectionClient : System.ServiceModel.ClientBase<IJobInspection>, IJobInspection {
    
    private BeginOperationDelegate onBeginEchoDelegate;
    
    private EndOperationDelegate onEndEchoDelegate;
    
    private System.Threading.SendOrPostCallback onEchoCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrderIDsDelegate;
    
    private EndOperationDelegate onEndGetOrderIDsDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrderIDsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrderIDsByCustomerLastNameDelegate;
    
    private EndOperationDelegate onEndGetOrderIDsByCustomerLastNameDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrderIDsByCustomerLastNameCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrderIDsByDateRangeDelegate;
    
    private EndOperationDelegate onEndGetOrderIDsByDateRangeDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrderIDsByDateRangeCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrderIDsByStoreNumberDelegate;
    
    private EndOperationDelegate onEndGetOrderIDsByStoreNumberDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrderIDsByStoreNumberCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrderIDsByMultipleCriteriaDelegate;
    
    private EndOperationDelegate onEndGetOrderIDsByMultipleCriteriaDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrderIDsByMultipleCriteriaCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrdersByPONumberDelegate;
    
    private EndOperationDelegate onEndGetOrdersByPONumberDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrdersByPONumberCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetOrderByIDDelegate;
    
    private EndOperationDelegate onEndGetOrderByIDDelegate;
    
    private System.Threading.SendOrPostCallback onGetOrderByIDCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetAllNoteTypesDelegate;
    
    private EndOperationDelegate onEndGetAllNoteTypesDelegate;
    
    private System.Threading.SendOrPostCallback onGetAllNoteTypesCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddNoteDelegate;
    
    private EndOperationDelegate onEndAddNoteDelegate;
    
    private System.Threading.SendOrPostCallback onAddNoteCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetNoteDelegate;
    
    private EndOperationDelegate onEndGetNoteDelegate;
    
    private System.Threading.SendOrPostCallback onGetNoteCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetNotesDelegate;
    
    private EndOperationDelegate onEndGetNotesDelegate;
    
    private System.Threading.SendOrPostCallback onGetNotesCompletedDelegate;
    
    private BeginOperationDelegate onBeginUpdateNoteTextDelegate;
    
    private EndOperationDelegate onEndUpdateNoteTextDelegate;
    
    private System.Threading.SendOrPostCallback onUpdateNoteTextCompletedDelegate;
    
    private BeginOperationDelegate onBeginDeleteNoteDelegate;
    
    private EndOperationDelegate onEndDeleteNoteDelegate;
    
    private System.Threading.SendOrPostCallback onDeleteNoteCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetAllUsersDelegate;
    
    private EndOperationDelegate onEndGetAllUsersDelegate;
    
    private System.Threading.SendOrPostCallback onGetAllUsersCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddPhotoDelegate;
    
    private EndOperationDelegate onEndAddPhotoDelegate;
    
    private System.Threading.SendOrPostCallback onAddPhotoCompletedDelegate;
    
    private BeginOperationDelegate onBeginQueuePhotoDownloadDelegate;
    
    private EndOperationDelegate onEndQueuePhotoDownloadDelegate;
    
    private System.Threading.SendOrPostCallback onQueuePhotoDownloadCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetPhotoDelegate;
    
    private EndOperationDelegate onEndGetPhotoDelegate;
    
    private System.Threading.SendOrPostCallback onGetPhotoCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetPhotosDelegate;
    
    private EndOperationDelegate onEndGetPhotosDelegate;
    
    private System.Threading.SendOrPostCallback onGetPhotosCompletedDelegate;
    
    private BeginOperationDelegate onBeginDeletePhotoDelegate;
    
    private EndOperationDelegate onEndDeletePhotoDelegate;
    
    private System.Threading.SendOrPostCallback onDeletePhotoCompletedDelegate;
    
    private BeginOperationDelegate onBeginQueueDiagramDownloadDelegate;
    
    private EndOperationDelegate onEndQueueDiagramDownloadDelegate;
    
    private System.Threading.SendOrPostCallback onQueueDiagramDownloadCompletedDelegate;
    
    private BeginOperationDelegate onBeginUploadFileStartDelegate;
    
    private EndOperationDelegate onEndUploadFileStartDelegate;
    
    private System.Threading.SendOrPostCallback onUploadFileStartCompletedDelegate;
    
    private BeginOperationDelegate onBeginUploadFilePartDelegate;
    
    private EndOperationDelegate onEndUploadFilePartDelegate;
    
    private System.Threading.SendOrPostCallback onUploadFilePartCompletedDelegate;
    
    private BeginOperationDelegate onBeginUploadFileCancelDelegate;
    
    private EndOperationDelegate onEndUploadFileCancelDelegate;
    
    private System.Threading.SendOrPostCallback onUploadFileCancelCompletedDelegate;
    
    private BeginOperationDelegate onBeginUploadFileEndDelegate;
    
    private EndOperationDelegate onEndUploadFileEndDelegate;
    
    private System.Threading.SendOrPostCallback onUploadFileEndCompletedDelegate;
    
    private BeginOperationDelegate onBeginDownloadFileStartDelegate;
    
    private EndOperationDelegate onEndDownloadFileStartDelegate;
    
    private System.Threading.SendOrPostCallback onDownloadFileStartCompletedDelegate;
    
    private BeginOperationDelegate onBeginDownloadFilePartDelegate;
    
    private EndOperationDelegate onEndDownloadFilePartDelegate;
    
    private System.Threading.SendOrPostCallback onDownloadFilePartCompletedDelegate;
    
    private BeginOperationDelegate onBeginDownloadFileCancelDelegate;
    
    private EndOperationDelegate onEndDownloadFileCancelDelegate;
    
    private System.Threading.SendOrPostCallback onDownloadFileCancelCompletedDelegate;
    
    private BeginOperationDelegate onBeginDownloadFileEndDelegate;
    
    private EndOperationDelegate onEndDownloadFileEndDelegate;
    
    private System.Threading.SendOrPostCallback onDownloadFileEndCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetLogDirectoryNamesDelegate;
    
    private EndOperationDelegate onEndGetLogDirectoryNamesDelegate;
    
    private System.Threading.SendOrPostCallback onGetLogDirectoryNamesCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetCurrentLogDirectoryNameDelegate;
    
    private EndOperationDelegate onEndGetCurrentLogDirectoryNameDelegate;
    
    private System.Threading.SendOrPostCallback onGetCurrentLogDirectoryNameCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetLogFileNamesDelegate;
    
    private EndOperationDelegate onEndGetLogFileNamesDelegate;
    
    private System.Threading.SendOrPostCallback onGetLogFileNamesCompletedDelegate;
    
    private BeginOperationDelegate onBeginQueueLogFileDownloadDelegate;
    
    private EndOperationDelegate onEndQueueLogFileDownloadDelegate;
    
    private System.Threading.SendOrPostCallback onQueueLogFileDownloadCompletedDelegate;
    
    public JobInspectionClient() {
    }
    
    public JobInspectionClient(string endpointConfigurationName) : 
            base(endpointConfigurationName) {
    }
    
    public JobInspectionClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public JobInspectionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public JobInspectionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpoint) : 
            base(binding, endpoint) {
    }
    
    public event System.EventHandler<EchoCompletedEventArgs> EchoCompleted;
    
    public event System.EventHandler<GetOrderIDsCompletedEventArgs> GetOrderIDsCompleted;
    
    public event System.EventHandler<GetOrderIDsByCustomerLastNameCompletedEventArgs> GetOrderIDsByCustomerLastNameCompleted;
    
    public event System.EventHandler<GetOrderIDsByDateRangeCompletedEventArgs> GetOrderIDsByDateRangeCompleted;
    
    public event System.EventHandler<GetOrderIDsByStoreNumberCompletedEventArgs> GetOrderIDsByStoreNumberCompleted;
    
    public event System.EventHandler<GetOrderIDsByMultipleCriteriaCompletedEventArgs> GetOrderIDsByMultipleCriteriaCompleted;
    
    public event System.EventHandler<GetOrdersByPONumberCompletedEventArgs> GetOrdersByPONumberCompleted;
    
    public event System.EventHandler<GetOrderByIDCompletedEventArgs> GetOrderByIDCompleted;
    
    public event System.EventHandler<GetAllNoteTypesCompletedEventArgs> GetAllNoteTypesCompleted;
    
    public event System.EventHandler<AddNoteCompletedEventArgs> AddNoteCompleted;
    
    public event System.EventHandler<GetNoteCompletedEventArgs> GetNoteCompleted;
    
    public event System.EventHandler<GetNotesCompletedEventArgs> GetNotesCompleted;
    
    public event System.EventHandler<UpdateNoteTextCompletedEventArgs> UpdateNoteTextCompleted;
    
    public event System.EventHandler<DeleteNoteCompletedEventArgs> DeleteNoteCompleted;
    
    public event System.EventHandler<GetAllUsersCompletedEventArgs> GetAllUsersCompleted;
    
    public event System.EventHandler<AddPhotoCompletedEventArgs> AddPhotoCompleted;
    
    public event System.EventHandler<QueuePhotoDownloadCompletedEventArgs> QueuePhotoDownloadCompleted;
    
    public event System.EventHandler<GetPhotoCompletedEventArgs> GetPhotoCompleted;
    
    public event System.EventHandler<GetPhotosCompletedEventArgs> GetPhotosCompleted;
    
    public event System.EventHandler<DeletePhotoCompletedEventArgs> DeletePhotoCompleted;
    
    public event System.EventHandler<QueueDiagramDownloadCompletedEventArgs> QueueDiagramDownloadCompleted;
    
    public event System.EventHandler<UploadFileStartCompletedEventArgs> UploadFileStartCompleted;
    
    public event System.EventHandler<UploadFilePartCompletedEventArgs> UploadFilePartCompleted;
    
    public event System.EventHandler<UploadFileCancelCompletedEventArgs> UploadFileCancelCompleted;
    
    public event System.EventHandler<UploadFileEndCompletedEventArgs> UploadFileEndCompleted;
    
    public event System.EventHandler<DownloadFileStartCompletedEventArgs> DownloadFileStartCompleted;
    
    public event System.EventHandler<DownloadFilePartCompletedEventArgs> DownloadFilePartCompleted;
    
    public event System.EventHandler<DownloadFileCancelCompletedEventArgs> DownloadFileCancelCompleted;
    
    public event System.EventHandler<DownloadFileEndCompletedEventArgs> DownloadFileEndCompleted;
    
    public event System.EventHandler<GetLogDirectoryNamesCompletedEventArgs> GetLogDirectoryNamesCompleted;
    
    public event System.EventHandler<GetCurrentLogDirectoryNameCompletedEventArgs> GetCurrentLogDirectoryNameCompleted;
    
    public event System.EventHandler<GetLogFileNamesCompletedEventArgs> GetLogFileNamesCompleted;
    
    public event System.EventHandler<QueueLogFileDownloadCompletedEventArgs> QueueLogFileDownloadCompleted;
    
    public string Echo(string accessToken, string returnThis) {
        return base.Channel.Echo(accessToken, returnThis);
    }
    
    public System.IAsyncResult BeginEcho(string accessToken, string returnThis, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginEcho(accessToken, returnThis, asyncCallback, userState);
    }
    
    public string EndEcho(System.IAsyncResult result) {
        return base.Channel.EndEcho(result);
    }
    
    public int[] GetOrderIDs(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders) {
        return base.Channel.GetOrderIDs(accessToken, scheduledOnly, activeOnly, maxOrders);
    }
    
    public System.IAsyncResult BeginGetOrderIDs(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrderIDs(accessToken, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    public int[] EndGetOrderIDs(System.IAsyncResult result) {
        return base.Channel.EndGetOrderIDs(result);
    }
    
    public int[] GetOrderIDsByCustomerLastName(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders) {
        return base.Channel.GetOrderIDsByCustomerLastName(accessToken, lastName, scheduledOnly, activeOnly, maxOrders);
    }
    
    public System.IAsyncResult BeginGetOrderIDsByCustomerLastName(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrderIDsByCustomerLastName(accessToken, lastName, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    public int[] EndGetOrderIDsByCustomerLastName(System.IAsyncResult result) {
        return base.Channel.EndGetOrderIDsByCustomerLastName(result);
    }
    
    public int[] GetOrderIDsByDateRange(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders) {
        return base.Channel.GetOrderIDsByDateRange(accessToken, range, scheduledOnly, activeOnly, maxOrders);
    }
    
    public System.IAsyncResult BeginGetOrderIDsByDateRange(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrderIDsByDateRange(accessToken, range, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    public int[] EndGetOrderIDsByDateRange(System.IAsyncResult result) {
        return base.Channel.EndGetOrderIDsByDateRange(result);
    }
    
    public int[] GetOrderIDsByStoreNumber(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders) {
        return base.Channel.GetOrderIDsByStoreNumber(accessToken, storeNumber, scheduledOnly, activeOnly, maxOrders);
    }
    
    public System.IAsyncResult BeginGetOrderIDsByStoreNumber(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrderIDsByStoreNumber(accessToken, storeNumber, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    public int[] EndGetOrderIDsByStoreNumber(System.IAsyncResult result) {
        return base.Channel.EndGetOrderIDsByStoreNumber(result);
    }
    
    public int[] GetOrderIDsByMultipleCriteria(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders) {
        return base.Channel.GetOrderIDsByMultipleCriteria(accessToken, lastName, poNumber, storeNumber, range, scheduledOnly, activeOnly, maxOrders);
    }
    
    public System.IAsyncResult BeginGetOrderIDsByMultipleCriteria(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrderIDsByMultipleCriteria(accessToken, lastName, poNumber, storeNumber, range, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    public int[] EndGetOrderIDsByMultipleCriteria(System.IAsyncResult result) {
        return base.Channel.EndGetOrderIDsByMultipleCriteria(result);
    }
    
    public int[] GetOrdersByPONumber(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders) {
        return base.Channel.GetOrdersByPONumber(accessToken, poNumber, scheduledOnly, activeOnly, maxOrders);
    }
    
    public System.IAsyncResult BeginGetOrdersByPONumber(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrdersByPONumber(accessToken, poNumber, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    public int[] EndGetOrdersByPONumber(System.IAsyncResult result) {
        return base.Channel.EndGetOrdersByPONumber(result);
    }
    
    public CFI.OrderInfo GetOrderByID(string accessToken, int ID) {
        return base.Channel.GetOrderByID(accessToken, ID);
    }
    
    public System.IAsyncResult BeginGetOrderByID(string accessToken, int ID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetOrderByID(accessToken, ID, asyncCallback, userState);
    }
    
    public CFI.OrderInfo EndGetOrderByID(System.IAsyncResult result) {
        return base.Channel.EndGetOrderByID(result);
    }
    
    public string GetAllNoteTypes(string accessToken) {
        return base.Channel.GetAllNoteTypes(accessToken);
    }
    
    public System.IAsyncResult BeginGetAllNoteTypes(string accessToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetAllNoteTypes(accessToken, asyncCallback, userState);
    }
    
    public string EndGetAllNoteTypes(System.IAsyncResult result) {
        return base.Channel.EndGetAllNoteTypes(result);
    }
    
    public bool AddNote(string accessToken, int orderID, CFI.NoteInfo note) {
        return base.Channel.AddNote(accessToken, orderID, note);
    }
    
    public System.IAsyncResult BeginAddNote(string accessToken, int orderID, CFI.NoteInfo note, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginAddNote(accessToken, orderID, note, asyncCallback, userState);
    }
    
    public bool EndAddNote(System.IAsyncResult result) {
        return base.Channel.EndAddNote(result);
    }
    
    public CFI.NoteInfo GetNote(string accessToken, int noteID) {
        return base.Channel.GetNote(accessToken, noteID);
    }
    
    public System.IAsyncResult BeginGetNote(string accessToken, int noteID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetNote(accessToken, noteID, asyncCallback, userState);
    }
    
    public CFI.NoteInfo EndGetNote(System.IAsyncResult result) {
        return base.Channel.EndGetNote(result);
    }
    
    public string GetNotes(string accessToken, int orderID) {
        return base.Channel.GetNotes(accessToken, orderID);
    }
    
    public System.IAsyncResult BeginGetNotes(string accessToken, int orderID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetNotes(accessToken, orderID, asyncCallback, userState);
    }
    
    public string EndGetNotes(System.IAsyncResult result) {
        return base.Channel.EndGetNotes(result);
    }
    
    public bool UpdateNoteText(string accessToken, int noteID, string newText) {
        return base.Channel.UpdateNoteText(accessToken, noteID, newText);
    }
    
    public System.IAsyncResult BeginUpdateNoteText(string accessToken, int noteID, string newText, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginUpdateNoteText(accessToken, noteID, newText, asyncCallback, userState);
    }
    
    public bool EndUpdateNoteText(System.IAsyncResult result) {
        return base.Channel.EndUpdateNoteText(result);
    }
    
    public bool DeleteNote(string accessToken, int noteID) {
        return base.Channel.DeleteNote(accessToken, noteID);
    }
    
    public System.IAsyncResult BeginDeleteNote(string accessToken, int noteID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginDeleteNote(accessToken, noteID, asyncCallback, userState);
    }
    
    public bool EndDeleteNote(System.IAsyncResult result) {
        return base.Channel.EndDeleteNote(result);
    }
    
    public string GetAllUsers(string accessToken) {
        return base.Channel.GetAllUsers(accessToken);
    }
    
    public System.IAsyncResult BeginGetAllUsers(string accessToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetAllUsers(accessToken, asyncCallback, userState);
    }
    
    public string EndGetAllUsers(System.IAsyncResult result) {
        return base.Channel.EndGetAllUsers(result);
    }
    
    public bool AddPhoto(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken) {
        return base.Channel.AddPhoto(accessToken, orderID, photo, fileExtension, uploadedFileClaimToken);
    }
    
    public System.IAsyncResult BeginAddPhoto(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginAddPhoto(accessToken, orderID, photo, fileExtension, uploadedFileClaimToken, asyncCallback, userState);
    }
    
    public bool EndAddPhoto(System.IAsyncResult result) {
        return base.Channel.EndAddPhoto(result);
    }
    
    public string QueuePhotoDownload(string accessToken, int id) {
        return base.Channel.QueuePhotoDownload(accessToken, id);
    }
    
    public System.IAsyncResult BeginQueuePhotoDownload(string accessToken, int id, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginQueuePhotoDownload(accessToken, id, asyncCallback, userState);
    }
    
    public string EndQueuePhotoDownload(System.IAsyncResult result) {
        return base.Channel.EndQueuePhotoDownload(result);
    }
    
    public CFI.PhotoInfo GetPhoto(string accessToken, int photoID) {
        return base.Channel.GetPhoto(accessToken, photoID);
    }
    
    public System.IAsyncResult BeginGetPhoto(string accessToken, int photoID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetPhoto(accessToken, photoID, asyncCallback, userState);
    }
    
    public CFI.PhotoInfo EndGetPhoto(System.IAsyncResult result) {
        return base.Channel.EndGetPhoto(result);
    }
    
    public string GetPhotos(string accessToken, int orderID) {
        return base.Channel.GetPhotos(accessToken, orderID);
    }
    
    public System.IAsyncResult BeginGetPhotos(string accessToken, int orderID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetPhotos(accessToken, orderID, asyncCallback, userState);
    }
    
    public string EndGetPhotos(System.IAsyncResult result) {
        return base.Channel.EndGetPhotos(result);
    }
    
    public bool DeletePhoto(string accessToken, int photoID) {
        return base.Channel.DeletePhoto(accessToken, photoID);
    }
    
    public System.IAsyncResult BeginDeletePhoto(string accessToken, int photoID, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginDeletePhoto(accessToken, photoID, asyncCallback, userState);
    }
    
    public bool EndDeletePhoto(System.IAsyncResult result) {
        return base.Channel.EndDeletePhoto(result);
    }
    
    public string QueueDiagramDownload(string accessToken, string diagramNumber) {
        return base.Channel.QueueDiagramDownload(accessToken, diagramNumber);
    }
    
    public System.IAsyncResult BeginQueueDiagramDownload(string accessToken, string diagramNumber, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginQueueDiagramDownload(accessToken, diagramNumber, asyncCallback, userState);
    }
    
    public string EndQueueDiagramDownload(System.IAsyncResult result) {
        return base.Channel.EndQueueDiagramDownload(result);
    }
    
    public string UploadFileStart(string accessToken, int totalBytes, int chunkSize) {
        return base.Channel.UploadFileStart(accessToken, totalBytes, chunkSize);
    }
    
    public System.IAsyncResult BeginUploadFileStart(string accessToken, int totalBytes, int chunkSize, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginUploadFileStart(accessToken, totalBytes, chunkSize, asyncCallback, userState);
    }
    
    public string EndUploadFileStart(System.IAsyncResult result) {
        return base.Channel.EndUploadFileStart(result);
    }
    
    public bool UploadFilePart(string accessToken, string transferToken, int chunkIndex, byte[] bytes) {
        return base.Channel.UploadFilePart(accessToken, transferToken, chunkIndex, bytes);
    }
    
    public System.IAsyncResult BeginUploadFilePart(string accessToken, string transferToken, int chunkIndex, byte[] bytes, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginUploadFilePart(accessToken, transferToken, chunkIndex, bytes, asyncCallback, userState);
    }
    
    public bool EndUploadFilePart(System.IAsyncResult result) {
        return base.Channel.EndUploadFilePart(result);
    }
    
    public bool UploadFileCancel(string accessToken, string transferToken) {
        return base.Channel.UploadFileCancel(accessToken, transferToken);
    }
    
    public System.IAsyncResult BeginUploadFileCancel(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginUploadFileCancel(accessToken, transferToken, asyncCallback, userState);
    }
    
    public bool EndUploadFileCancel(System.IAsyncResult result) {
        return base.Channel.EndUploadFileCancel(result);
    }
    
    public bool UploadFileEnd(string accessToken, string transferToken) {
        return base.Channel.UploadFileEnd(accessToken, transferToken);
    }
    
    public System.IAsyncResult BeginUploadFileEnd(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginUploadFileEnd(accessToken, transferToken, asyncCallback, userState);
    }
    
    public bool EndUploadFileEnd(System.IAsyncResult result) {
        return base.Channel.EndUploadFileEnd(result);
    }
    
    public int DownloadFileStart(string accessToken, string transferToken, int chunkSize) {
        return base.Channel.DownloadFileStart(accessToken, transferToken, chunkSize);
    }
    
    public System.IAsyncResult BeginDownloadFileStart(string accessToken, string transferToken, int chunkSize, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginDownloadFileStart(accessToken, transferToken, chunkSize, asyncCallback, userState);
    }
    
    public int EndDownloadFileStart(System.IAsyncResult result) {
        return base.Channel.EndDownloadFileStart(result);
    }
    
    public byte[] DownloadFilePart(string accessToken, string transferToken, int chunkIndex) {
        return base.Channel.DownloadFilePart(accessToken, transferToken, chunkIndex);
    }
    
    public System.IAsyncResult BeginDownloadFilePart(string accessToken, string transferToken, int chunkIndex, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginDownloadFilePart(accessToken, transferToken, chunkIndex, asyncCallback, userState);
    }
    
    public byte[] EndDownloadFilePart(System.IAsyncResult result) {
        return base.Channel.EndDownloadFilePart(result);
    }
    
    public bool DownloadFileCancel(string accessToken, string transferToken) {
        return base.Channel.DownloadFileCancel(accessToken, transferToken);
    }
    
    public System.IAsyncResult BeginDownloadFileCancel(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginDownloadFileCancel(accessToken, transferToken, asyncCallback, userState);
    }
    
    public bool EndDownloadFileCancel(System.IAsyncResult result) {
        return base.Channel.EndDownloadFileCancel(result);
    }
    
    public bool DownloadFileEnd(string accessToken, string transferToken) {
        return base.Channel.DownloadFileEnd(accessToken, transferToken);
    }
    
    public System.IAsyncResult BeginDownloadFileEnd(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginDownloadFileEnd(accessToken, transferToken, asyncCallback, userState);
    }
    
    public bool EndDownloadFileEnd(System.IAsyncResult result) {
        return base.Channel.EndDownloadFileEnd(result);
    }
    
    public string[] GetLogDirectoryNames(string accessToken) {
        return base.Channel.GetLogDirectoryNames(accessToken);
    }
    
    public System.IAsyncResult BeginGetLogDirectoryNames(string accessToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetLogDirectoryNames(accessToken, asyncCallback, userState);
    }
    
    public string[] EndGetLogDirectoryNames(System.IAsyncResult result) {
        return base.Channel.EndGetLogDirectoryNames(result);
    }
    
    public string GetCurrentLogDirectoryName(string accessToken) {
        return base.Channel.GetCurrentLogDirectoryName(accessToken);
    }
    
    public System.IAsyncResult BeginGetCurrentLogDirectoryName(string accessToken, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetCurrentLogDirectoryName(accessToken, asyncCallback, userState);
    }
    
    public string EndGetCurrentLogDirectoryName(System.IAsyncResult result) {
        return base.Channel.EndGetCurrentLogDirectoryName(result);
    }
    
    public string[] GetLogFileNames(string accessToken, string logDirectoryName) {
        return base.Channel.GetLogFileNames(accessToken, logDirectoryName);
    }
    
    public System.IAsyncResult BeginGetLogFileNames(string accessToken, string logDirectoryName, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetLogFileNames(accessToken, logDirectoryName, asyncCallback, userState);
    }
    
    public string[] EndGetLogFileNames(System.IAsyncResult result) {
        return base.Channel.EndGetLogFileNames(result);
    }
    
    public string QueueLogFileDownload(string accessToken, string directoryName, string fileName) {
        return base.Channel.QueueLogFileDownload(accessToken, directoryName, fileName);
    }
    
    public System.IAsyncResult BeginQueueLogFileDownload(string accessToken, string directoryName, string fileName, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginQueueLogFileDownload(accessToken, directoryName, fileName, asyncCallback, userState);
    }
    
    public string EndQueueLogFileDownload(System.IAsyncResult result) {
        return base.Channel.EndQueueLogFileDownload(result);
    }
    
    private System.IAsyncResult OnBeginEcho(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string returnThis = ((string)(args[1]));
        return this.BeginEcho(accessToken, returnThis, asyncCallback, userState);
    }
    
    private object[] OnEndEcho(System.IAsyncResult result) {
        object __ret = this.EndEcho(result);
        return new object[] {
                __ret};
    }
    
    private void OnEchoCompleted(object state) {
        if ((this.EchoCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.EchoCompleted(this, new EchoCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void EchoAsync(string accessToken, string returnThis) {
        this.EchoAsync(accessToken, returnThis, null);
    }
    
    public void EchoAsync(string accessToken, string returnThis, object userState) {
        if ((this.onBeginEchoDelegate == null)) {
            this.onBeginEchoDelegate = new BeginOperationDelegate(this.OnBeginEcho);
        }
        if ((this.onEndEchoDelegate == null)) {
            this.onEndEchoDelegate = new EndOperationDelegate(this.OnEndEcho);
        }
        if ((this.onEchoCompletedDelegate == null)) {
            this.onEchoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEchoCompleted);
        }
        base.InvokeAsync(this.onBeginEchoDelegate, new object[] {
                    accessToken,
                    returnThis,
                    userState}, this.onEndEchoDelegate, this.onEchoCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrderIDs(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        bool scheduledOnly = ((bool)(args[1]));
        bool activeOnly = ((bool)(args[2]));
        int maxOrders = ((int)(args[3]));
        return this.BeginGetOrderIDs(accessToken, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrderIDs(System.IAsyncResult result) {
        object __ret = this.EndGetOrderIDs(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrderIDsCompleted(object state) {
        if ((this.GetOrderIDsCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrderIDsCompleted(this, new GetOrderIDsCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrderIDsAsync(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders) {
        this.GetOrderIDsAsync(accessToken, scheduledOnly, activeOnly, maxOrders, null);
    }
    
    public void GetOrderIDsAsync(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders, object userState) {
        if ((this.onBeginGetOrderIDsDelegate == null)) {
            this.onBeginGetOrderIDsDelegate = new BeginOperationDelegate(this.OnBeginGetOrderIDs);
        }
        if ((this.onEndGetOrderIDsDelegate == null)) {
            this.onEndGetOrderIDsDelegate = new EndOperationDelegate(this.OnEndGetOrderIDs);
        }
        if ((this.onGetOrderIDsCompletedDelegate == null)) {
            this.onGetOrderIDsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderIDsCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrderIDsDelegate, new object[] {
                    accessToken,
                    scheduledOnly,
                    activeOnly,
                    maxOrders,
                    userState}, this.onEndGetOrderIDsDelegate, this.onGetOrderIDsCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrderIDsByCustomerLastName(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string lastName = ((string)(args[1]));
        bool scheduledOnly = ((bool)(args[2]));
        bool activeOnly = ((bool)(args[3]));
        int maxOrders = ((int)(args[4]));
        return this.BeginGetOrderIDsByCustomerLastName(accessToken, lastName, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrderIDsByCustomerLastName(System.IAsyncResult result) {
        object __ret = this.EndGetOrderIDsByCustomerLastName(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrderIDsByCustomerLastNameCompleted(object state) {
        if ((this.GetOrderIDsByCustomerLastNameCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrderIDsByCustomerLastNameCompleted(this, new GetOrderIDsByCustomerLastNameCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrderIDsByCustomerLastNameAsync(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders) {
        this.GetOrderIDsByCustomerLastNameAsync(accessToken, lastName, scheduledOnly, activeOnly, maxOrders, null);
    }
    
    public void GetOrderIDsByCustomerLastNameAsync(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders, object userState) {
        if ((this.onBeginGetOrderIDsByCustomerLastNameDelegate == null)) {
            this.onBeginGetOrderIDsByCustomerLastNameDelegate = new BeginOperationDelegate(this.OnBeginGetOrderIDsByCustomerLastName);
        }
        if ((this.onEndGetOrderIDsByCustomerLastNameDelegate == null)) {
            this.onEndGetOrderIDsByCustomerLastNameDelegate = new EndOperationDelegate(this.OnEndGetOrderIDsByCustomerLastName);
        }
        if ((this.onGetOrderIDsByCustomerLastNameCompletedDelegate == null)) {
            this.onGetOrderIDsByCustomerLastNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderIDsByCustomerLastNameCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrderIDsByCustomerLastNameDelegate, new object[] {
                    accessToken,
                    lastName,
                    scheduledOnly,
                    activeOnly,
                    maxOrders,
                    userState}, this.onEndGetOrderIDsByCustomerLastNameDelegate, this.onGetOrderIDsByCustomerLastNameCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrderIDsByDateRange(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        CFI.DateRange range = ((CFI.DateRange)(args[1]));
        bool scheduledOnly = ((bool)(args[2]));
        bool activeOnly = ((bool)(args[3]));
        int maxOrders = ((int)(args[4]));
        return this.BeginGetOrderIDsByDateRange(accessToken, range, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrderIDsByDateRange(System.IAsyncResult result) {
        object __ret = this.EndGetOrderIDsByDateRange(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrderIDsByDateRangeCompleted(object state) {
        if ((this.GetOrderIDsByDateRangeCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrderIDsByDateRangeCompleted(this, new GetOrderIDsByDateRangeCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrderIDsByDateRangeAsync(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders) {
        this.GetOrderIDsByDateRangeAsync(accessToken, range, scheduledOnly, activeOnly, maxOrders, null);
    }
    
    public void GetOrderIDsByDateRangeAsync(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, object userState) {
        if ((this.onBeginGetOrderIDsByDateRangeDelegate == null)) {
            this.onBeginGetOrderIDsByDateRangeDelegate = new BeginOperationDelegate(this.OnBeginGetOrderIDsByDateRange);
        }
        if ((this.onEndGetOrderIDsByDateRangeDelegate == null)) {
            this.onEndGetOrderIDsByDateRangeDelegate = new EndOperationDelegate(this.OnEndGetOrderIDsByDateRange);
        }
        if ((this.onGetOrderIDsByDateRangeCompletedDelegate == null)) {
            this.onGetOrderIDsByDateRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderIDsByDateRangeCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrderIDsByDateRangeDelegate, new object[] {
                    accessToken,
                    range,
                    scheduledOnly,
                    activeOnly,
                    maxOrders,
                    userState}, this.onEndGetOrderIDsByDateRangeDelegate, this.onGetOrderIDsByDateRangeCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrderIDsByStoreNumber(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string storeNumber = ((string)(args[1]));
        bool scheduledOnly = ((bool)(args[2]));
        bool activeOnly = ((bool)(args[3]));
        int maxOrders = ((int)(args[4]));
        return this.BeginGetOrderIDsByStoreNumber(accessToken, storeNumber, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrderIDsByStoreNumber(System.IAsyncResult result) {
        object __ret = this.EndGetOrderIDsByStoreNumber(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrderIDsByStoreNumberCompleted(object state) {
        if ((this.GetOrderIDsByStoreNumberCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrderIDsByStoreNumberCompleted(this, new GetOrderIDsByStoreNumberCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrderIDsByStoreNumberAsync(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders) {
        this.GetOrderIDsByStoreNumberAsync(accessToken, storeNumber, scheduledOnly, activeOnly, maxOrders, null);
    }
    
    public void GetOrderIDsByStoreNumberAsync(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders, object userState) {
        if ((this.onBeginGetOrderIDsByStoreNumberDelegate == null)) {
            this.onBeginGetOrderIDsByStoreNumberDelegate = new BeginOperationDelegate(this.OnBeginGetOrderIDsByStoreNumber);
        }
        if ((this.onEndGetOrderIDsByStoreNumberDelegate == null)) {
            this.onEndGetOrderIDsByStoreNumberDelegate = new EndOperationDelegate(this.OnEndGetOrderIDsByStoreNumber);
        }
        if ((this.onGetOrderIDsByStoreNumberCompletedDelegate == null)) {
            this.onGetOrderIDsByStoreNumberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderIDsByStoreNumberCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrderIDsByStoreNumberDelegate, new object[] {
                    accessToken,
                    storeNumber,
                    scheduledOnly,
                    activeOnly,
                    maxOrders,
                    userState}, this.onEndGetOrderIDsByStoreNumberDelegate, this.onGetOrderIDsByStoreNumberCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrderIDsByMultipleCriteria(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string lastName = ((string)(args[1]));
        string poNumber = ((string)(args[2]));
        string storeNumber = ((string)(args[3]));
        CFI.DateRange range = ((CFI.DateRange)(args[4]));
        bool scheduledOnly = ((bool)(args[5]));
        bool activeOnly = ((bool)(args[6]));
        int maxOrders = ((int)(args[7]));
        return this.BeginGetOrderIDsByMultipleCriteria(accessToken, lastName, poNumber, storeNumber, range, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrderIDsByMultipleCriteria(System.IAsyncResult result) {
        object __ret = this.EndGetOrderIDsByMultipleCriteria(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrderIDsByMultipleCriteriaCompleted(object state) {
        if ((this.GetOrderIDsByMultipleCriteriaCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrderIDsByMultipleCriteriaCompleted(this, new GetOrderIDsByMultipleCriteriaCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrderIDsByMultipleCriteriaAsync(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders) {
        this.GetOrderIDsByMultipleCriteriaAsync(accessToken, lastName, poNumber, storeNumber, range, scheduledOnly, activeOnly, maxOrders, null);
    }
    
    public void GetOrderIDsByMultipleCriteriaAsync(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, object userState) {
        if ((this.onBeginGetOrderIDsByMultipleCriteriaDelegate == null)) {
            this.onBeginGetOrderIDsByMultipleCriteriaDelegate = new BeginOperationDelegate(this.OnBeginGetOrderIDsByMultipleCriteria);
        }
        if ((this.onEndGetOrderIDsByMultipleCriteriaDelegate == null)) {
            this.onEndGetOrderIDsByMultipleCriteriaDelegate = new EndOperationDelegate(this.OnEndGetOrderIDsByMultipleCriteria);
        }
        if ((this.onGetOrderIDsByMultipleCriteriaCompletedDelegate == null)) {
            this.onGetOrderIDsByMultipleCriteriaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderIDsByMultipleCriteriaCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrderIDsByMultipleCriteriaDelegate, new object[] {
                    accessToken,
                    lastName,
                    poNumber,
                    storeNumber,
                    range,
                    scheduledOnly,
                    activeOnly,
                    maxOrders,
                    userState}, this.onEndGetOrderIDsByMultipleCriteriaDelegate, this.onGetOrderIDsByMultipleCriteriaCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrdersByPONumber(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string poNumber = ((string)(args[1]));
        bool scheduledOnly = ((bool)(args[2]));
        bool activeOnly = ((bool)(args[3]));
        int maxOrders = ((int)(args[4]));
        return this.BeginGetOrdersByPONumber(accessToken, poNumber, scheduledOnly, activeOnly, maxOrders, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrdersByPONumber(System.IAsyncResult result) {
        object __ret = this.EndGetOrdersByPONumber(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrdersByPONumberCompleted(object state) {
        if ((this.GetOrdersByPONumberCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrdersByPONumberCompleted(this, new GetOrdersByPONumberCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrdersByPONumberAsync(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders) {
        this.GetOrdersByPONumberAsync(accessToken, poNumber, scheduledOnly, activeOnly, maxOrders, null);
    }
    
    public void GetOrdersByPONumberAsync(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders, object userState) {
        if ((this.onBeginGetOrdersByPONumberDelegate == null)) {
            this.onBeginGetOrdersByPONumberDelegate = new BeginOperationDelegate(this.OnBeginGetOrdersByPONumber);
        }
        if ((this.onEndGetOrdersByPONumberDelegate == null)) {
            this.onEndGetOrdersByPONumberDelegate = new EndOperationDelegate(this.OnEndGetOrdersByPONumber);
        }
        if ((this.onGetOrdersByPONumberCompletedDelegate == null)) {
            this.onGetOrdersByPONumberCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrdersByPONumberCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrdersByPONumberDelegate, new object[] {
                    accessToken,
                    poNumber,
                    scheduledOnly,
                    activeOnly,
                    maxOrders,
                    userState}, this.onEndGetOrdersByPONumberDelegate, this.onGetOrdersByPONumberCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetOrderByID(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int ID = ((int)(args[1]));
        return this.BeginGetOrderByID(accessToken, ID, asyncCallback, userState);
    }
    
    private object[] OnEndGetOrderByID(System.IAsyncResult result) {
        object __ret = this.EndGetOrderByID(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetOrderByIDCompleted(object state) {
        if ((this.GetOrderByIDCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetOrderByIDCompleted(this, new GetOrderByIDCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetOrderByIDAsync(string accessToken, int ID) {
        this.GetOrderByIDAsync(accessToken, ID, null);
    }
    
    public void GetOrderByIDAsync(string accessToken, int ID, object userState) {
        if ((this.onBeginGetOrderByIDDelegate == null)) {
            this.onBeginGetOrderByIDDelegate = new BeginOperationDelegate(this.OnBeginGetOrderByID);
        }
        if ((this.onEndGetOrderByIDDelegate == null)) {
            this.onEndGetOrderByIDDelegate = new EndOperationDelegate(this.OnEndGetOrderByID);
        }
        if ((this.onGetOrderByIDCompletedDelegate == null)) {
            this.onGetOrderByIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderByIDCompleted);
        }
        base.InvokeAsync(this.onBeginGetOrderByIDDelegate, new object[] {
                    accessToken,
                    ID,
                    userState}, this.onEndGetOrderByIDDelegate, this.onGetOrderByIDCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetAllNoteTypes(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        return this.BeginGetAllNoteTypes(accessToken, asyncCallback, userState);
    }
    
    private object[] OnEndGetAllNoteTypes(System.IAsyncResult result) {
        object __ret = this.EndGetAllNoteTypes(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetAllNoteTypesCompleted(object state) {
        if ((this.GetAllNoteTypesCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetAllNoteTypesCompleted(this, new GetAllNoteTypesCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetAllNoteTypesAsync(string accessToken) {
        this.GetAllNoteTypesAsync(accessToken, null);
    }
    
    public void GetAllNoteTypesAsync(string accessToken, object userState) {
        if ((this.onBeginGetAllNoteTypesDelegate == null)) {
            this.onBeginGetAllNoteTypesDelegate = new BeginOperationDelegate(this.OnBeginGetAllNoteTypes);
        }
        if ((this.onEndGetAllNoteTypesDelegate == null)) {
            this.onEndGetAllNoteTypesDelegate = new EndOperationDelegate(this.OnEndGetAllNoteTypes);
        }
        if ((this.onGetAllNoteTypesCompletedDelegate == null)) {
            this.onGetAllNoteTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllNoteTypesCompleted);
        }
        base.InvokeAsync(this.onBeginGetAllNoteTypesDelegate, new object[] {
                    accessToken,
                    userState}, this.onEndGetAllNoteTypesDelegate, this.onGetAllNoteTypesCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginAddNote(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int orderID = ((int)(args[1]));
        CFI.NoteInfo note = ((CFI.NoteInfo)(args[2]));
        return this.BeginAddNote(accessToken, orderID, note, asyncCallback, userState);
    }
    
    private object[] OnEndAddNote(System.IAsyncResult result) {
        object __ret = this.EndAddNote(result);
        return new object[] {
                __ret};
    }
    
    private void OnAddNoteCompleted(object state) {
        if ((this.AddNoteCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddNoteCompleted(this, new AddNoteCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void AddNoteAsync(string accessToken, int orderID, CFI.NoteInfo note) {
        this.AddNoteAsync(accessToken, orderID, note, null);
    }
    
    public void AddNoteAsync(string accessToken, int orderID, CFI.NoteInfo note, object userState) {
        if ((this.onBeginAddNoteDelegate == null)) {
            this.onBeginAddNoteDelegate = new BeginOperationDelegate(this.OnBeginAddNote);
        }
        if ((this.onEndAddNoteDelegate == null)) {
            this.onEndAddNoteDelegate = new EndOperationDelegate(this.OnEndAddNote);
        }
        if ((this.onAddNoteCompletedDelegate == null)) {
            this.onAddNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddNoteCompleted);
        }
        base.InvokeAsync(this.onBeginAddNoteDelegate, new object[] {
                    accessToken,
                    orderID,
                    note,
                    userState}, this.onEndAddNoteDelegate, this.onAddNoteCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetNote(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int noteID = ((int)(args[1]));
        return this.BeginGetNote(accessToken, noteID, asyncCallback, userState);
    }
    
    private object[] OnEndGetNote(System.IAsyncResult result) {
        object __ret = this.EndGetNote(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetNoteCompleted(object state) {
        if ((this.GetNoteCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetNoteCompleted(this, new GetNoteCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetNoteAsync(string accessToken, int noteID) {
        this.GetNoteAsync(accessToken, noteID, null);
    }
    
    public void GetNoteAsync(string accessToken, int noteID, object userState) {
        if ((this.onBeginGetNoteDelegate == null)) {
            this.onBeginGetNoteDelegate = new BeginOperationDelegate(this.OnBeginGetNote);
        }
        if ((this.onEndGetNoteDelegate == null)) {
            this.onEndGetNoteDelegate = new EndOperationDelegate(this.OnEndGetNote);
        }
        if ((this.onGetNoteCompletedDelegate == null)) {
            this.onGetNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNoteCompleted);
        }
        base.InvokeAsync(this.onBeginGetNoteDelegate, new object[] {
                    accessToken,
                    noteID,
                    userState}, this.onEndGetNoteDelegate, this.onGetNoteCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetNotes(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int orderID = ((int)(args[1]));
        return this.BeginGetNotes(accessToken, orderID, asyncCallback, userState);
    }
    
    private object[] OnEndGetNotes(System.IAsyncResult result) {
        object __ret = this.EndGetNotes(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetNotesCompleted(object state) {
        if ((this.GetNotesCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetNotesCompleted(this, new GetNotesCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetNotesAsync(string accessToken, int orderID) {
        this.GetNotesAsync(accessToken, orderID, null);
    }
    
    public void GetNotesAsync(string accessToken, int orderID, object userState) {
        if ((this.onBeginGetNotesDelegate == null)) {
            this.onBeginGetNotesDelegate = new BeginOperationDelegate(this.OnBeginGetNotes);
        }
        if ((this.onEndGetNotesDelegate == null)) {
            this.onEndGetNotesDelegate = new EndOperationDelegate(this.OnEndGetNotes);
        }
        if ((this.onGetNotesCompletedDelegate == null)) {
            this.onGetNotesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNotesCompleted);
        }
        base.InvokeAsync(this.onBeginGetNotesDelegate, new object[] {
                    accessToken,
                    orderID,
                    userState}, this.onEndGetNotesDelegate, this.onGetNotesCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginUpdateNoteText(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int noteID = ((int)(args[1]));
        string newText = ((string)(args[2]));
        return this.BeginUpdateNoteText(accessToken, noteID, newText, asyncCallback, userState);
    }
    
    private object[] OnEndUpdateNoteText(System.IAsyncResult result) {
        object __ret = this.EndUpdateNoteText(result);
        return new object[] {
                __ret};
    }
    
    private void OnUpdateNoteTextCompleted(object state) {
        if ((this.UpdateNoteTextCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.UpdateNoteTextCompleted(this, new UpdateNoteTextCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void UpdateNoteTextAsync(string accessToken, int noteID, string newText) {
        this.UpdateNoteTextAsync(accessToken, noteID, newText, null);
    }
    
    public void UpdateNoteTextAsync(string accessToken, int noteID, string newText, object userState) {
        if ((this.onBeginUpdateNoteTextDelegate == null)) {
            this.onBeginUpdateNoteTextDelegate = new BeginOperationDelegate(this.OnBeginUpdateNoteText);
        }
        if ((this.onEndUpdateNoteTextDelegate == null)) {
            this.onEndUpdateNoteTextDelegate = new EndOperationDelegate(this.OnEndUpdateNoteText);
        }
        if ((this.onUpdateNoteTextCompletedDelegate == null)) {
            this.onUpdateNoteTextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateNoteTextCompleted);
        }
        base.InvokeAsync(this.onBeginUpdateNoteTextDelegate, new object[] {
                    accessToken,
                    noteID,
                    newText,
                    userState}, this.onEndUpdateNoteTextDelegate, this.onUpdateNoteTextCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginDeleteNote(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int noteID = ((int)(args[1]));
        return this.BeginDeleteNote(accessToken, noteID, asyncCallback, userState);
    }
    
    private object[] OnEndDeleteNote(System.IAsyncResult result) {
        object __ret = this.EndDeleteNote(result);
        return new object[] {
                __ret};
    }
    
    private void OnDeleteNoteCompleted(object state) {
        if ((this.DeleteNoteCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.DeleteNoteCompleted(this, new DeleteNoteCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void DeleteNoteAsync(string accessToken, int noteID) {
        this.DeleteNoteAsync(accessToken, noteID, null);
    }
    
    public void DeleteNoteAsync(string accessToken, int noteID, object userState) {
        if ((this.onBeginDeleteNoteDelegate == null)) {
            this.onBeginDeleteNoteDelegate = new BeginOperationDelegate(this.OnBeginDeleteNote);
        }
        if ((this.onEndDeleteNoteDelegate == null)) {
            this.onEndDeleteNoteDelegate = new EndOperationDelegate(this.OnEndDeleteNote);
        }
        if ((this.onDeleteNoteCompletedDelegate == null)) {
            this.onDeleteNoteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteNoteCompleted);
        }
        base.InvokeAsync(this.onBeginDeleteNoteDelegate, new object[] {
                    accessToken,
                    noteID,
                    userState}, this.onEndDeleteNoteDelegate, this.onDeleteNoteCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetAllUsers(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        return this.BeginGetAllUsers(accessToken, asyncCallback, userState);
    }
    
    private object[] OnEndGetAllUsers(System.IAsyncResult result) {
        object __ret = this.EndGetAllUsers(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetAllUsersCompleted(object state) {
        if ((this.GetAllUsersCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetAllUsersAsync(string accessToken) {
        this.GetAllUsersAsync(accessToken, null);
    }
    
    public void GetAllUsersAsync(string accessToken, object userState) {
        if ((this.onBeginGetAllUsersDelegate == null)) {
            this.onBeginGetAllUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAllUsers);
        }
        if ((this.onEndGetAllUsersDelegate == null)) {
            this.onEndGetAllUsersDelegate = new EndOperationDelegate(this.OnEndGetAllUsers);
        }
        if ((this.onGetAllUsersCompletedDelegate == null)) {
            this.onGetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUsersCompleted);
        }
        base.InvokeAsync(this.onBeginGetAllUsersDelegate, new object[] {
                    accessToken,
                    userState}, this.onEndGetAllUsersDelegate, this.onGetAllUsersCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginAddPhoto(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int orderID = ((int)(args[1]));
        CFI.PhotoInfo photo = ((CFI.PhotoInfo)(args[2]));
        string fileExtension = ((string)(args[3]));
        string uploadedFileClaimToken = ((string)(args[4]));
        return this.BeginAddPhoto(accessToken, orderID, photo, fileExtension, uploadedFileClaimToken, asyncCallback, userState);
    }
    
    private object[] OnEndAddPhoto(System.IAsyncResult result) {
        object __ret = this.EndAddPhoto(result);
        return new object[] {
                __ret};
    }
    
    private void OnAddPhotoCompleted(object state) {
        if ((this.AddPhotoCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddPhotoCompleted(this, new AddPhotoCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void AddPhotoAsync(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken) {
        this.AddPhotoAsync(accessToken, orderID, photo, fileExtension, uploadedFileClaimToken, null);
    }
    
    public void AddPhotoAsync(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken, object userState) {
        if ((this.onBeginAddPhotoDelegate == null)) {
            this.onBeginAddPhotoDelegate = new BeginOperationDelegate(this.OnBeginAddPhoto);
        }
        if ((this.onEndAddPhotoDelegate == null)) {
            this.onEndAddPhotoDelegate = new EndOperationDelegate(this.OnEndAddPhoto);
        }
        if ((this.onAddPhotoCompletedDelegate == null)) {
            this.onAddPhotoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPhotoCompleted);
        }
        base.InvokeAsync(this.onBeginAddPhotoDelegate, new object[] {
                    accessToken,
                    orderID,
                    photo,
                    fileExtension,
                    uploadedFileClaimToken,
                    userState}, this.onEndAddPhotoDelegate, this.onAddPhotoCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginQueuePhotoDownload(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int id = ((int)(args[1]));
        return this.BeginQueuePhotoDownload(accessToken, id, asyncCallback, userState);
    }
    
    private object[] OnEndQueuePhotoDownload(System.IAsyncResult result) {
        object __ret = this.EndQueuePhotoDownload(result);
        return new object[] {
                __ret};
    }
    
    private void OnQueuePhotoDownloadCompleted(object state) {
        if ((this.QueuePhotoDownloadCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.QueuePhotoDownloadCompleted(this, new QueuePhotoDownloadCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void QueuePhotoDownloadAsync(string accessToken, int id) {
        this.QueuePhotoDownloadAsync(accessToken, id, null);
    }
    
    public void QueuePhotoDownloadAsync(string accessToken, int id, object userState) {
        if ((this.onBeginQueuePhotoDownloadDelegate == null)) {
            this.onBeginQueuePhotoDownloadDelegate = new BeginOperationDelegate(this.OnBeginQueuePhotoDownload);
        }
        if ((this.onEndQueuePhotoDownloadDelegate == null)) {
            this.onEndQueuePhotoDownloadDelegate = new EndOperationDelegate(this.OnEndQueuePhotoDownload);
        }
        if ((this.onQueuePhotoDownloadCompletedDelegate == null)) {
            this.onQueuePhotoDownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueuePhotoDownloadCompleted);
        }
        base.InvokeAsync(this.onBeginQueuePhotoDownloadDelegate, new object[] {
                    accessToken,
                    id,
                    userState}, this.onEndQueuePhotoDownloadDelegate, this.onQueuePhotoDownloadCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetPhoto(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int photoID = ((int)(args[1]));
        return this.BeginGetPhoto(accessToken, photoID, asyncCallback, userState);
    }
    
    private object[] OnEndGetPhoto(System.IAsyncResult result) {
        object __ret = this.EndGetPhoto(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetPhotoCompleted(object state) {
        if ((this.GetPhotoCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetPhotoCompleted(this, new GetPhotoCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetPhotoAsync(string accessToken, int photoID) {
        this.GetPhotoAsync(accessToken, photoID, null);
    }
    
    public void GetPhotoAsync(string accessToken, int photoID, object userState) {
        if ((this.onBeginGetPhotoDelegate == null)) {
            this.onBeginGetPhotoDelegate = new BeginOperationDelegate(this.OnBeginGetPhoto);
        }
        if ((this.onEndGetPhotoDelegate == null)) {
            this.onEndGetPhotoDelegate = new EndOperationDelegate(this.OnEndGetPhoto);
        }
        if ((this.onGetPhotoCompletedDelegate == null)) {
            this.onGetPhotoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhotoCompleted);
        }
        base.InvokeAsync(this.onBeginGetPhotoDelegate, new object[] {
                    accessToken,
                    photoID,
                    userState}, this.onEndGetPhotoDelegate, this.onGetPhotoCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetPhotos(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int orderID = ((int)(args[1]));
        return this.BeginGetPhotos(accessToken, orderID, asyncCallback, userState);
    }
    
    private object[] OnEndGetPhotos(System.IAsyncResult result) {
        object __ret = this.EndGetPhotos(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetPhotosCompleted(object state) {
        if ((this.GetPhotosCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetPhotosCompleted(this, new GetPhotosCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetPhotosAsync(string accessToken, int orderID) {
        this.GetPhotosAsync(accessToken, orderID, null);
    }
    
    public void GetPhotosAsync(string accessToken, int orderID, object userState) {
        if ((this.onBeginGetPhotosDelegate == null)) {
            this.onBeginGetPhotosDelegate = new BeginOperationDelegate(this.OnBeginGetPhotos);
        }
        if ((this.onEndGetPhotosDelegate == null)) {
            this.onEndGetPhotosDelegate = new EndOperationDelegate(this.OnEndGetPhotos);
        }
        if ((this.onGetPhotosCompletedDelegate == null)) {
            this.onGetPhotosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPhotosCompleted);
        }
        base.InvokeAsync(this.onBeginGetPhotosDelegate, new object[] {
                    accessToken,
                    orderID,
                    userState}, this.onEndGetPhotosDelegate, this.onGetPhotosCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginDeletePhoto(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int photoID = ((int)(args[1]));
        return this.BeginDeletePhoto(accessToken, photoID, asyncCallback, userState);
    }
    
    private object[] OnEndDeletePhoto(System.IAsyncResult result) {
        object __ret = this.EndDeletePhoto(result);
        return new object[] {
                __ret};
    }
    
    private void OnDeletePhotoCompleted(object state) {
        if ((this.DeletePhotoCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.DeletePhotoCompleted(this, new DeletePhotoCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void DeletePhotoAsync(string accessToken, int photoID) {
        this.DeletePhotoAsync(accessToken, photoID, null);
    }
    
    public void DeletePhotoAsync(string accessToken, int photoID, object userState) {
        if ((this.onBeginDeletePhotoDelegate == null)) {
            this.onBeginDeletePhotoDelegate = new BeginOperationDelegate(this.OnBeginDeletePhoto);
        }
        if ((this.onEndDeletePhotoDelegate == null)) {
            this.onEndDeletePhotoDelegate = new EndOperationDelegate(this.OnEndDeletePhoto);
        }
        if ((this.onDeletePhotoCompletedDelegate == null)) {
            this.onDeletePhotoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePhotoCompleted);
        }
        base.InvokeAsync(this.onBeginDeletePhotoDelegate, new object[] {
                    accessToken,
                    photoID,
                    userState}, this.onEndDeletePhotoDelegate, this.onDeletePhotoCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginQueueDiagramDownload(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string diagramNumber = ((string)(args[1]));
        return this.BeginQueueDiagramDownload(accessToken, diagramNumber, asyncCallback, userState);
    }
    
    private object[] OnEndQueueDiagramDownload(System.IAsyncResult result) {
        object __ret = this.EndQueueDiagramDownload(result);
        return new object[] {
                __ret};
    }
    
    private void OnQueueDiagramDownloadCompleted(object state) {
        if ((this.QueueDiagramDownloadCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.QueueDiagramDownloadCompleted(this, new QueueDiagramDownloadCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void QueueDiagramDownloadAsync(string accessToken, string diagramNumber) {
        this.QueueDiagramDownloadAsync(accessToken, diagramNumber, null);
    }
    
    public void QueueDiagramDownloadAsync(string accessToken, string diagramNumber, object userState) {
        if ((this.onBeginQueueDiagramDownloadDelegate == null)) {
            this.onBeginQueueDiagramDownloadDelegate = new BeginOperationDelegate(this.OnBeginQueueDiagramDownload);
        }
        if ((this.onEndQueueDiagramDownloadDelegate == null)) {
            this.onEndQueueDiagramDownloadDelegate = new EndOperationDelegate(this.OnEndQueueDiagramDownload);
        }
        if ((this.onQueueDiagramDownloadCompletedDelegate == null)) {
            this.onQueueDiagramDownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueueDiagramDownloadCompleted);
        }
        base.InvokeAsync(this.onBeginQueueDiagramDownloadDelegate, new object[] {
                    accessToken,
                    diagramNumber,
                    userState}, this.onEndQueueDiagramDownloadDelegate, this.onQueueDiagramDownloadCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginUploadFileStart(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        int totalBytes = ((int)(args[1]));
        int chunkSize = ((int)(args[2]));
        return this.BeginUploadFileStart(accessToken, totalBytes, chunkSize, asyncCallback, userState);
    }
    
    private object[] OnEndUploadFileStart(System.IAsyncResult result) {
        object __ret = this.EndUploadFileStart(result);
        return new object[] {
                __ret};
    }
    
    private void OnUploadFileStartCompleted(object state) {
        if ((this.UploadFileStartCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.UploadFileStartCompleted(this, new UploadFileStartCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void UploadFileStartAsync(string accessToken, int totalBytes, int chunkSize) {
        this.UploadFileStartAsync(accessToken, totalBytes, chunkSize, null);
    }
    
    public void UploadFileStartAsync(string accessToken, int totalBytes, int chunkSize, object userState) {
        if ((this.onBeginUploadFileStartDelegate == null)) {
            this.onBeginUploadFileStartDelegate = new BeginOperationDelegate(this.OnBeginUploadFileStart);
        }
        if ((this.onEndUploadFileStartDelegate == null)) {
            this.onEndUploadFileStartDelegate = new EndOperationDelegate(this.OnEndUploadFileStart);
        }
        if ((this.onUploadFileStartCompletedDelegate == null)) {
            this.onUploadFileStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileStartCompleted);
        }
        base.InvokeAsync(this.onBeginUploadFileStartDelegate, new object[] {
                    accessToken,
                    totalBytes,
                    chunkSize,
                    userState}, this.onEndUploadFileStartDelegate, this.onUploadFileStartCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginUploadFilePart(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        int chunkIndex = ((int)(args[2]));
        byte[] bytes = ((byte[])(args[3]));
        return this.BeginUploadFilePart(accessToken, transferToken, chunkIndex, bytes, asyncCallback, userState);
    }
    
    private object[] OnEndUploadFilePart(System.IAsyncResult result) {
        object __ret = this.EndUploadFilePart(result);
        return new object[] {
                __ret};
    }
    
    private void OnUploadFilePartCompleted(object state) {
        if ((this.UploadFilePartCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.UploadFilePartCompleted(this, new UploadFilePartCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void UploadFilePartAsync(string accessToken, string transferToken, int chunkIndex, byte[] bytes) {
        this.UploadFilePartAsync(accessToken, transferToken, chunkIndex, bytes, null);
    }
    
    public void UploadFilePartAsync(string accessToken, string transferToken, int chunkIndex, byte[] bytes, object userState) {
        if ((this.onBeginUploadFilePartDelegate == null)) {
            this.onBeginUploadFilePartDelegate = new BeginOperationDelegate(this.OnBeginUploadFilePart);
        }
        if ((this.onEndUploadFilePartDelegate == null)) {
            this.onEndUploadFilePartDelegate = new EndOperationDelegate(this.OnEndUploadFilePart);
        }
        if ((this.onUploadFilePartCompletedDelegate == null)) {
            this.onUploadFilePartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFilePartCompleted);
        }
        base.InvokeAsync(this.onBeginUploadFilePartDelegate, new object[] {
                    accessToken,
                    transferToken,
                    chunkIndex,
                    bytes,
                    userState}, this.onEndUploadFilePartDelegate, this.onUploadFilePartCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginUploadFileCancel(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        return this.BeginUploadFileCancel(accessToken, transferToken, asyncCallback, userState);
    }
    
    private object[] OnEndUploadFileCancel(System.IAsyncResult result) {
        object __ret = this.EndUploadFileCancel(result);
        return new object[] {
                __ret};
    }
    
    private void OnUploadFileCancelCompleted(object state) {
        if ((this.UploadFileCancelCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.UploadFileCancelCompleted(this, new UploadFileCancelCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void UploadFileCancelAsync(string accessToken, string transferToken) {
        this.UploadFileCancelAsync(accessToken, transferToken, null);
    }
    
    public void UploadFileCancelAsync(string accessToken, string transferToken, object userState) {
        if ((this.onBeginUploadFileCancelDelegate == null)) {
            this.onBeginUploadFileCancelDelegate = new BeginOperationDelegate(this.OnBeginUploadFileCancel);
        }
        if ((this.onEndUploadFileCancelDelegate == null)) {
            this.onEndUploadFileCancelDelegate = new EndOperationDelegate(this.OnEndUploadFileCancel);
        }
        if ((this.onUploadFileCancelCompletedDelegate == null)) {
            this.onUploadFileCancelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCancelCompleted);
        }
        base.InvokeAsync(this.onBeginUploadFileCancelDelegate, new object[] {
                    accessToken,
                    transferToken,
                    userState}, this.onEndUploadFileCancelDelegate, this.onUploadFileCancelCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginUploadFileEnd(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        return this.BeginUploadFileEnd(accessToken, transferToken, asyncCallback, userState);
    }
    
    private object[] OnEndUploadFileEnd(System.IAsyncResult result) {
        object __ret = this.EndUploadFileEnd(result);
        return new object[] {
                __ret};
    }
    
    private void OnUploadFileEndCompleted(object state) {
        if ((this.UploadFileEndCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.UploadFileEndCompleted(this, new UploadFileEndCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void UploadFileEndAsync(string accessToken, string transferToken) {
        this.UploadFileEndAsync(accessToken, transferToken, null);
    }
    
    public void UploadFileEndAsync(string accessToken, string transferToken, object userState) {
        if ((this.onBeginUploadFileEndDelegate == null)) {
            this.onBeginUploadFileEndDelegate = new BeginOperationDelegate(this.OnBeginUploadFileEnd);
        }
        if ((this.onEndUploadFileEndDelegate == null)) {
            this.onEndUploadFileEndDelegate = new EndOperationDelegate(this.OnEndUploadFileEnd);
        }
        if ((this.onUploadFileEndCompletedDelegate == null)) {
            this.onUploadFileEndCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileEndCompleted);
        }
        base.InvokeAsync(this.onBeginUploadFileEndDelegate, new object[] {
                    accessToken,
                    transferToken,
                    userState}, this.onEndUploadFileEndDelegate, this.onUploadFileEndCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginDownloadFileStart(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        int chunkSize = ((int)(args[2]));
        return this.BeginDownloadFileStart(accessToken, transferToken, chunkSize, asyncCallback, userState);
    }
    
    private object[] OnEndDownloadFileStart(System.IAsyncResult result) {
        object __ret = this.EndDownloadFileStart(result);
        return new object[] {
                __ret};
    }
    
    private void OnDownloadFileStartCompleted(object state) {
        if ((this.DownloadFileStartCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.DownloadFileStartCompleted(this, new DownloadFileStartCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void DownloadFileStartAsync(string accessToken, string transferToken, int chunkSize) {
        this.DownloadFileStartAsync(accessToken, transferToken, chunkSize, null);
    }
    
    public void DownloadFileStartAsync(string accessToken, string transferToken, int chunkSize, object userState) {
        if ((this.onBeginDownloadFileStartDelegate == null)) {
            this.onBeginDownloadFileStartDelegate = new BeginOperationDelegate(this.OnBeginDownloadFileStart);
        }
        if ((this.onEndDownloadFileStartDelegate == null)) {
            this.onEndDownloadFileStartDelegate = new EndOperationDelegate(this.OnEndDownloadFileStart);
        }
        if ((this.onDownloadFileStartCompletedDelegate == null)) {
            this.onDownloadFileStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileStartCompleted);
        }
        base.InvokeAsync(this.onBeginDownloadFileStartDelegate, new object[] {
                    accessToken,
                    transferToken,
                    chunkSize,
                    userState}, this.onEndDownloadFileStartDelegate, this.onDownloadFileStartCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginDownloadFilePart(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        int chunkIndex = ((int)(args[2]));
        return this.BeginDownloadFilePart(accessToken, transferToken, chunkIndex, asyncCallback, userState);
    }
    
    private object[] OnEndDownloadFilePart(System.IAsyncResult result) {
        object __ret = this.EndDownloadFilePart(result);
        return new object[] {
                __ret};
    }
    
    private void OnDownloadFilePartCompleted(object state) {
        if ((this.DownloadFilePartCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.DownloadFilePartCompleted(this, new DownloadFilePartCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void DownloadFilePartAsync(string accessToken, string transferToken, int chunkIndex) {
        this.DownloadFilePartAsync(accessToken, transferToken, chunkIndex, null);
    }
    
    public void DownloadFilePartAsync(string accessToken, string transferToken, int chunkIndex, object userState) {
        if ((this.onBeginDownloadFilePartDelegate == null)) {
            this.onBeginDownloadFilePartDelegate = new BeginOperationDelegate(this.OnBeginDownloadFilePart);
        }
        if ((this.onEndDownloadFilePartDelegate == null)) {
            this.onEndDownloadFilePartDelegate = new EndOperationDelegate(this.OnEndDownloadFilePart);
        }
        if ((this.onDownloadFilePartCompletedDelegate == null)) {
            this.onDownloadFilePartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFilePartCompleted);
        }
        base.InvokeAsync(this.onBeginDownloadFilePartDelegate, new object[] {
                    accessToken,
                    transferToken,
                    chunkIndex,
                    userState}, this.onEndDownloadFilePartDelegate, this.onDownloadFilePartCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginDownloadFileCancel(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        return this.BeginDownloadFileCancel(accessToken, transferToken, asyncCallback, userState);
    }
    
    private object[] OnEndDownloadFileCancel(System.IAsyncResult result) {
        object __ret = this.EndDownloadFileCancel(result);
        return new object[] {
                __ret};
    }
    
    private void OnDownloadFileCancelCompleted(object state) {
        if ((this.DownloadFileCancelCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.DownloadFileCancelCompleted(this, new DownloadFileCancelCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void DownloadFileCancelAsync(string accessToken, string transferToken) {
        this.DownloadFileCancelAsync(accessToken, transferToken, null);
    }
    
    public void DownloadFileCancelAsync(string accessToken, string transferToken, object userState) {
        if ((this.onBeginDownloadFileCancelDelegate == null)) {
            this.onBeginDownloadFileCancelDelegate = new BeginOperationDelegate(this.OnBeginDownloadFileCancel);
        }
        if ((this.onEndDownloadFileCancelDelegate == null)) {
            this.onEndDownloadFileCancelDelegate = new EndOperationDelegate(this.OnEndDownloadFileCancel);
        }
        if ((this.onDownloadFileCancelCompletedDelegate == null)) {
            this.onDownloadFileCancelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileCancelCompleted);
        }
        base.InvokeAsync(this.onBeginDownloadFileCancelDelegate, new object[] {
                    accessToken,
                    transferToken,
                    userState}, this.onEndDownloadFileCancelDelegate, this.onDownloadFileCancelCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginDownloadFileEnd(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string transferToken = ((string)(args[1]));
        return this.BeginDownloadFileEnd(accessToken, transferToken, asyncCallback, userState);
    }
    
    private object[] OnEndDownloadFileEnd(System.IAsyncResult result) {
        object __ret = this.EndDownloadFileEnd(result);
        return new object[] {
                __ret};
    }
    
    private void OnDownloadFileEndCompleted(object state) {
        if ((this.DownloadFileEndCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.DownloadFileEndCompleted(this, new DownloadFileEndCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void DownloadFileEndAsync(string accessToken, string transferToken) {
        this.DownloadFileEndAsync(accessToken, transferToken, null);
    }
    
    public void DownloadFileEndAsync(string accessToken, string transferToken, object userState) {
        if ((this.onBeginDownloadFileEndDelegate == null)) {
            this.onBeginDownloadFileEndDelegate = new BeginOperationDelegate(this.OnBeginDownloadFileEnd);
        }
        if ((this.onEndDownloadFileEndDelegate == null)) {
            this.onEndDownloadFileEndDelegate = new EndOperationDelegate(this.OnEndDownloadFileEnd);
        }
        if ((this.onDownloadFileEndCompletedDelegate == null)) {
            this.onDownloadFileEndCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileEndCompleted);
        }
        base.InvokeAsync(this.onBeginDownloadFileEndDelegate, new object[] {
                    accessToken,
                    transferToken,
                    userState}, this.onEndDownloadFileEndDelegate, this.onDownloadFileEndCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetLogDirectoryNames(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        return this.BeginGetLogDirectoryNames(accessToken, asyncCallback, userState);
    }
    
    private object[] OnEndGetLogDirectoryNames(System.IAsyncResult result) {
        object __ret = this.EndGetLogDirectoryNames(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetLogDirectoryNamesCompleted(object state) {
        if ((this.GetLogDirectoryNamesCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetLogDirectoryNamesCompleted(this, new GetLogDirectoryNamesCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetLogDirectoryNamesAsync(string accessToken) {
        this.GetLogDirectoryNamesAsync(accessToken, null);
    }
    
    public void GetLogDirectoryNamesAsync(string accessToken, object userState) {
        if ((this.onBeginGetLogDirectoryNamesDelegate == null)) {
            this.onBeginGetLogDirectoryNamesDelegate = new BeginOperationDelegate(this.OnBeginGetLogDirectoryNames);
        }
        if ((this.onEndGetLogDirectoryNamesDelegate == null)) {
            this.onEndGetLogDirectoryNamesDelegate = new EndOperationDelegate(this.OnEndGetLogDirectoryNames);
        }
        if ((this.onGetLogDirectoryNamesCompletedDelegate == null)) {
            this.onGetLogDirectoryNamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogDirectoryNamesCompleted);
        }
        base.InvokeAsync(this.onBeginGetLogDirectoryNamesDelegate, new object[] {
                    accessToken,
                    userState}, this.onEndGetLogDirectoryNamesDelegate, this.onGetLogDirectoryNamesCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetCurrentLogDirectoryName(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        return this.BeginGetCurrentLogDirectoryName(accessToken, asyncCallback, userState);
    }
    
    private object[] OnEndGetCurrentLogDirectoryName(System.IAsyncResult result) {
        object __ret = this.EndGetCurrentLogDirectoryName(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetCurrentLogDirectoryNameCompleted(object state) {
        if ((this.GetCurrentLogDirectoryNameCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetCurrentLogDirectoryNameCompleted(this, new GetCurrentLogDirectoryNameCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetCurrentLogDirectoryNameAsync(string accessToken) {
        this.GetCurrentLogDirectoryNameAsync(accessToken, null);
    }
    
    public void GetCurrentLogDirectoryNameAsync(string accessToken, object userState) {
        if ((this.onBeginGetCurrentLogDirectoryNameDelegate == null)) {
            this.onBeginGetCurrentLogDirectoryNameDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentLogDirectoryName);
        }
        if ((this.onEndGetCurrentLogDirectoryNameDelegate == null)) {
            this.onEndGetCurrentLogDirectoryNameDelegate = new EndOperationDelegate(this.OnEndGetCurrentLogDirectoryName);
        }
        if ((this.onGetCurrentLogDirectoryNameCompletedDelegate == null)) {
            this.onGetCurrentLogDirectoryNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentLogDirectoryNameCompleted);
        }
        base.InvokeAsync(this.onBeginGetCurrentLogDirectoryNameDelegate, new object[] {
                    accessToken,
                    userState}, this.onEndGetCurrentLogDirectoryNameDelegate, this.onGetCurrentLogDirectoryNameCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginGetLogFileNames(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string logDirectoryName = ((string)(args[1]));
        return this.BeginGetLogFileNames(accessToken, logDirectoryName, asyncCallback, userState);
    }
    
    private object[] OnEndGetLogFileNames(System.IAsyncResult result) {
        object __ret = this.EndGetLogFileNames(result);
        return new object[] {
                __ret};
    }
    
    private void OnGetLogFileNamesCompleted(object state) {
        if ((this.GetLogFileNamesCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetLogFileNamesCompleted(this, new GetLogFileNamesCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void GetLogFileNamesAsync(string accessToken, string logDirectoryName) {
        this.GetLogFileNamesAsync(accessToken, logDirectoryName, null);
    }
    
    public void GetLogFileNamesAsync(string accessToken, string logDirectoryName, object userState) {
        if ((this.onBeginGetLogFileNamesDelegate == null)) {
            this.onBeginGetLogFileNamesDelegate = new BeginOperationDelegate(this.OnBeginGetLogFileNames);
        }
        if ((this.onEndGetLogFileNamesDelegate == null)) {
            this.onEndGetLogFileNamesDelegate = new EndOperationDelegate(this.OnEndGetLogFileNames);
        }
        if ((this.onGetLogFileNamesCompletedDelegate == null)) {
            this.onGetLogFileNamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogFileNamesCompleted);
        }
        base.InvokeAsync(this.onBeginGetLogFileNamesDelegate, new object[] {
                    accessToken,
                    logDirectoryName,
                    userState}, this.onEndGetLogFileNamesDelegate, this.onGetLogFileNamesCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginQueueLogFileDownload(object[] args, System.AsyncCallback asyncCallback, object userState) {
        string accessToken = ((string)(args[0]));
        string directoryName = ((string)(args[1]));
        string fileName = ((string)(args[2]));
        return this.BeginQueueLogFileDownload(accessToken, directoryName, fileName, asyncCallback, userState);
    }
    
    private object[] OnEndQueueLogFileDownload(System.IAsyncResult result) {
        object __ret = this.EndQueueLogFileDownload(result);
        return new object[] {
                __ret};
    }
    
    private void OnQueueLogFileDownloadCompleted(object state) {
        if ((this.QueueLogFileDownloadCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.QueueLogFileDownloadCompleted(this, new QueueLogFileDownloadCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void QueueLogFileDownloadAsync(string accessToken, string directoryName, string fileName) {
        this.QueueLogFileDownloadAsync(accessToken, directoryName, fileName, null);
    }
    
    public void QueueLogFileDownloadAsync(string accessToken, string directoryName, string fileName, object userState) {
        if ((this.onBeginQueueLogFileDownloadDelegate == null)) {
            this.onBeginQueueLogFileDownloadDelegate = new BeginOperationDelegate(this.OnBeginQueueLogFileDownload);
        }
        if ((this.onEndQueueLogFileDownloadDelegate == null)) {
            this.onEndQueueLogFileDownloadDelegate = new EndOperationDelegate(this.OnEndQueueLogFileDownload);
        }
        if ((this.onQueueLogFileDownloadCompletedDelegate == null)) {
            this.onQueueLogFileDownloadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnQueueLogFileDownloadCompleted);
        }
        base.InvokeAsync(this.onBeginQueueLogFileDownloadDelegate, new object[] {
                    accessToken,
                    directoryName,
                    fileName,
                    userState}, this.onEndQueueLogFileDownloadDelegate, this.onQueueLogFileDownloadCompletedDelegate, userState);
    }
    
    protected override IJobInspection CreateChannel() {
        return ((IJobInspection)(new JobInspectionChannel(this)));
    }
    
    private class JobInspectionChannel : ChannelBase<IJobInspection>, IJobInspection {
        
        public JobInspectionChannel(System.ServiceModel.ClientBase<IJobInspection> client) : 
                base(client) {
        }
        
        public string Echo(string accessToken, string returnThis) {
            object[] args = new object[] {
                    accessToken,
                    returnThis};
            return ((string)(base.Invoke("Echo", args)));
        }
        
        public System.IAsyncResult BeginEcho(string accessToken, string returnThis, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("Echo", new object[] {
                        accessToken,
                        returnThis}, asyncCallback, userState);
        }
        
        public string EndEcho(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("Echo", args, result)));
        }
        
        public int[] GetOrderIDs(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders) {
            object[] args = new object[] {
                    accessToken,
                    scheduledOnly,
                    activeOnly,
                    maxOrders};
            return ((int[])(base.Invoke("GetOrderIDs", args)));
        }
        
        public System.IAsyncResult BeginGetOrderIDs(string accessToken, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrderIDs", new object[] {
                        accessToken,
                        scheduledOnly,
                        activeOnly,
                        maxOrders}, asyncCallback, userState);
        }
        
        public int[] EndGetOrderIDs(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int[])(base.EndInvoke("GetOrderIDs", args, result)));
        }
        
        public int[] GetOrderIDsByCustomerLastName(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders) {
            object[] args = new object[] {
                    accessToken,
                    lastName,
                    scheduledOnly,
                    activeOnly,
                    maxOrders};
            return ((int[])(base.Invoke("GetOrderIDsByCustomerLastName", args)));
        }
        
        public System.IAsyncResult BeginGetOrderIDsByCustomerLastName(string accessToken, string lastName, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrderIDsByCustomerLastName", new object[] {
                        accessToken,
                        lastName,
                        scheduledOnly,
                        activeOnly,
                        maxOrders}, asyncCallback, userState);
        }
        
        public int[] EndGetOrderIDsByCustomerLastName(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int[])(base.EndInvoke("GetOrderIDsByCustomerLastName", args, result)));
        }
        
        public int[] GetOrderIDsByDateRange(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders) {
            object[] args = new object[] {
                    accessToken,
                    range,
                    scheduledOnly,
                    activeOnly,
                    maxOrders};
            return ((int[])(base.Invoke("GetOrderIDsByDateRange", args)));
        }
        
        public System.IAsyncResult BeginGetOrderIDsByDateRange(string accessToken, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrderIDsByDateRange", new object[] {
                        accessToken,
                        range,
                        scheduledOnly,
                        activeOnly,
                        maxOrders}, asyncCallback, userState);
        }
        
        public int[] EndGetOrderIDsByDateRange(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int[])(base.EndInvoke("GetOrderIDsByDateRange", args, result)));
        }
        
        public int[] GetOrderIDsByStoreNumber(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders) {
            object[] args = new object[] {
                    accessToken,
                    storeNumber,
                    scheduledOnly,
                    activeOnly,
                    maxOrders};
            return ((int[])(base.Invoke("GetOrderIDsByStoreNumber", args)));
        }
        
        public System.IAsyncResult BeginGetOrderIDsByStoreNumber(string accessToken, string storeNumber, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrderIDsByStoreNumber", new object[] {
                        accessToken,
                        storeNumber,
                        scheduledOnly,
                        activeOnly,
                        maxOrders}, asyncCallback, userState);
        }
        
        public int[] EndGetOrderIDsByStoreNumber(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int[])(base.EndInvoke("GetOrderIDsByStoreNumber", args, result)));
        }
        
        public int[] GetOrderIDsByMultipleCriteria(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders) {
            object[] args = new object[] {
                    accessToken,
                    lastName,
                    poNumber,
                    storeNumber,
                    range,
                    scheduledOnly,
                    activeOnly,
                    maxOrders};
            return ((int[])(base.Invoke("GetOrderIDsByMultipleCriteria", args)));
        }
        
        public System.IAsyncResult BeginGetOrderIDsByMultipleCriteria(string accessToken, string lastName, string poNumber, string storeNumber, CFI.DateRange range, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrderIDsByMultipleCriteria", new object[] {
                        accessToken,
                        lastName,
                        poNumber,
                        storeNumber,
                        range,
                        scheduledOnly,
                        activeOnly,
                        maxOrders}, asyncCallback, userState);
        }
        
        public int[] EndGetOrderIDsByMultipleCriteria(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int[])(base.EndInvoke("GetOrderIDsByMultipleCriteria", args, result)));
        }
        
        public int[] GetOrdersByPONumber(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders) {
            object[] args = new object[] {
                    accessToken,
                    poNumber,
                    scheduledOnly,
                    activeOnly,
                    maxOrders};
            return ((int[])(base.Invoke("GetOrdersByPONumber", args)));
        }
        
        public System.IAsyncResult BeginGetOrdersByPONumber(string accessToken, string poNumber, bool scheduledOnly, bool activeOnly, int maxOrders, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrdersByPONumber", new object[] {
                        accessToken,
                        poNumber,
                        scheduledOnly,
                        activeOnly,
                        maxOrders}, asyncCallback, userState);
        }
        
        public int[] EndGetOrdersByPONumber(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int[])(base.EndInvoke("GetOrdersByPONumber", args, result)));
        }
        
        public CFI.OrderInfo GetOrderByID(string accessToken, int ID) {
            object[] args = new object[] {
                    accessToken,
                    ID};
            return ((CFI.OrderInfo)(base.Invoke("GetOrderByID", args)));
        }
        
        public System.IAsyncResult BeginGetOrderByID(string accessToken, int ID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetOrderByID", new object[] {
                        accessToken,
                        ID}, asyncCallback, userState);
        }
        
        public CFI.OrderInfo EndGetOrderByID(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((CFI.OrderInfo)(base.EndInvoke("GetOrderByID", args, result)));
        }
        
        public string GetAllNoteTypes(string accessToken) {
            object[] args = new object[] {
                    accessToken};
            return ((string)(base.Invoke("GetAllNoteTypes", args)));
        }
        
        public System.IAsyncResult BeginGetAllNoteTypes(string accessToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetAllNoteTypes", new object[] {
                        accessToken}, asyncCallback, userState);
        }
        
        public string EndGetAllNoteTypes(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("GetAllNoteTypes", args, result)));
        }
        
        public bool AddNote(string accessToken, int orderID, CFI.NoteInfo note) {
            object[] args = new object[] {
                    accessToken,
                    orderID,
                    note};
            return ((bool)(base.Invoke("AddNote", args)));
        }
        
        public System.IAsyncResult BeginAddNote(string accessToken, int orderID, CFI.NoteInfo note, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("AddNote", new object[] {
                        accessToken,
                        orderID,
                        note}, asyncCallback, userState);
        }
        
        public bool EndAddNote(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("AddNote", args, result)));
        }
        
        public CFI.NoteInfo GetNote(string accessToken, int noteID) {
            object[] args = new object[] {
                    accessToken,
                    noteID};
            return ((CFI.NoteInfo)(base.Invoke("GetNote", args)));
        }
        
        public System.IAsyncResult BeginGetNote(string accessToken, int noteID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetNote", new object[] {
                        accessToken,
                        noteID}, asyncCallback, userState);
        }
        
        public CFI.NoteInfo EndGetNote(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((CFI.NoteInfo)(base.EndInvoke("GetNote", args, result)));
        }
        
        public string GetNotes(string accessToken, int orderID) {
            object[] args = new object[] {
                    accessToken,
                    orderID};
            return ((string)(base.Invoke("GetNotes", args)));
        }
        
        public System.IAsyncResult BeginGetNotes(string accessToken, int orderID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetNotes", new object[] {
                        accessToken,
                        orderID}, asyncCallback, userState);
        }
        
        public string EndGetNotes(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("GetNotes", args, result)));
        }
        
        public bool UpdateNoteText(string accessToken, int noteID, string newText) {
            object[] args = new object[] {
                    accessToken,
                    noteID,
                    newText};
            return ((bool)(base.Invoke("UpdateNoteText", args)));
        }
        
        public System.IAsyncResult BeginUpdateNoteText(string accessToken, int noteID, string newText, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("UpdateNoteText", new object[] {
                        accessToken,
                        noteID,
                        newText}, asyncCallback, userState);
        }
        
        public bool EndUpdateNoteText(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("UpdateNoteText", args, result)));
        }
        
        public bool DeleteNote(string accessToken, int noteID) {
            object[] args = new object[] {
                    accessToken,
                    noteID};
            return ((bool)(base.Invoke("DeleteNote", args)));
        }
        
        public System.IAsyncResult BeginDeleteNote(string accessToken, int noteID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("DeleteNote", new object[] {
                        accessToken,
                        noteID}, asyncCallback, userState);
        }
        
        public bool EndDeleteNote(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("DeleteNote", args, result)));
        }
        
        public string GetAllUsers(string accessToken) {
            object[] args = new object[] {
                    accessToken};
            return ((string)(base.Invoke("GetAllUsers", args)));
        }
        
        public System.IAsyncResult BeginGetAllUsers(string accessToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetAllUsers", new object[] {
                        accessToken}, asyncCallback, userState);
        }
        
        public string EndGetAllUsers(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("GetAllUsers", args, result)));
        }
        
        public bool AddPhoto(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken) {
            object[] args = new object[] {
                    accessToken,
                    orderID,
                    photo,
                    fileExtension,
                    uploadedFileClaimToken};
            return ((bool)(base.Invoke("AddPhoto", args)));
        }
        
        public System.IAsyncResult BeginAddPhoto(string accessToken, int orderID, CFI.PhotoInfo photo, string fileExtension, string uploadedFileClaimToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("AddPhoto", new object[] {
                        accessToken,
                        orderID,
                        photo,
                        fileExtension,
                        uploadedFileClaimToken}, asyncCallback, userState);
        }
        
        public bool EndAddPhoto(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("AddPhoto", args, result)));
        }
        
        public string QueuePhotoDownload(string accessToken, int id) {
            object[] args = new object[] {
                    accessToken,
                    id};
            return ((string)(base.Invoke("QueuePhotoDownload", args)));
        }
        
        public System.IAsyncResult BeginQueuePhotoDownload(string accessToken, int id, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("QueuePhotoDownload", new object[] {
                        accessToken,
                        id}, asyncCallback, userState);
        }
        
        public string EndQueuePhotoDownload(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("QueuePhotoDownload", args, result)));
        }
        
        public CFI.PhotoInfo GetPhoto(string accessToken, int photoID) {
            object[] args = new object[] {
                    accessToken,
                    photoID};
            return ((CFI.PhotoInfo)(base.Invoke("GetPhoto", args)));
        }
        
        public System.IAsyncResult BeginGetPhoto(string accessToken, int photoID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetPhoto", new object[] {
                        accessToken,
                        photoID}, asyncCallback, userState);
        }
        
        public CFI.PhotoInfo EndGetPhoto(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((CFI.PhotoInfo)(base.EndInvoke("GetPhoto", args, result)));
        }
        
        public string GetPhotos(string accessToken, int orderID) {
            object[] args = new object[] {
                    accessToken,
                    orderID};
            return ((string)(base.Invoke("GetPhotos", args)));
        }
        
        public System.IAsyncResult BeginGetPhotos(string accessToken, int orderID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetPhotos", new object[] {
                        accessToken,
                        orderID}, asyncCallback, userState);
        }
        
        public string EndGetPhotos(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("GetPhotos", args, result)));
        }
        
        public bool DeletePhoto(string accessToken, int photoID) {
            object[] args = new object[] {
                    accessToken,
                    photoID};
            return ((bool)(base.Invoke("DeletePhoto", args)));
        }
        
        public System.IAsyncResult BeginDeletePhoto(string accessToken, int photoID, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("DeletePhoto", new object[] {
                        accessToken,
                        photoID}, asyncCallback, userState);
        }
        
        public bool EndDeletePhoto(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("DeletePhoto", args, result)));
        }
        
        public string QueueDiagramDownload(string accessToken, string diagramNumber) {
            object[] args = new object[] {
                    accessToken,
                    diagramNumber};
            return ((string)(base.Invoke("QueueDiagramDownload", args)));
        }
        
        public System.IAsyncResult BeginQueueDiagramDownload(string accessToken, string diagramNumber, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("QueueDiagramDownload", new object[] {
                        accessToken,
                        diagramNumber}, asyncCallback, userState);
        }
        
        public string EndQueueDiagramDownload(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("QueueDiagramDownload", args, result)));
        }
        
        public string UploadFileStart(string accessToken, int totalBytes, int chunkSize) {
            object[] args = new object[] {
                    accessToken,
                    totalBytes,
                    chunkSize};
            return ((string)(base.Invoke("UploadFileStart", args)));
        }
        
        public System.IAsyncResult BeginUploadFileStart(string accessToken, int totalBytes, int chunkSize, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("UploadFileStart", new object[] {
                        accessToken,
                        totalBytes,
                        chunkSize}, asyncCallback, userState);
        }
        
        public string EndUploadFileStart(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("UploadFileStart", args, result)));
        }
        
        public bool UploadFilePart(string accessToken, string transferToken, int chunkIndex, byte[] bytes) {
            object[] args = new object[] {
                    accessToken,
                    transferToken,
                    chunkIndex,
                    bytes};
            return ((bool)(base.Invoke("UploadFilePart", args)));
        }
        
        public System.IAsyncResult BeginUploadFilePart(string accessToken, string transferToken, int chunkIndex, byte[] bytes, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("UploadFilePart", new object[] {
                        accessToken,
                        transferToken,
                        chunkIndex,
                        bytes}, asyncCallback, userState);
        }
        
        public bool EndUploadFilePart(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("UploadFilePart", args, result)));
        }
        
        public bool UploadFileCancel(string accessToken, string transferToken) {
            object[] args = new object[] {
                    accessToken,
                    transferToken};
            return ((bool)(base.Invoke("UploadFileCancel", args)));
        }
        
        public System.IAsyncResult BeginUploadFileCancel(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("UploadFileCancel", new object[] {
                        accessToken,
                        transferToken}, asyncCallback, userState);
        }
        
        public bool EndUploadFileCancel(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("UploadFileCancel", args, result)));
        }
        
        public bool UploadFileEnd(string accessToken, string transferToken) {
            object[] args = new object[] {
                    accessToken,
                    transferToken};
            return ((bool)(base.Invoke("UploadFileEnd", args)));
        }
        
        public System.IAsyncResult BeginUploadFileEnd(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("UploadFileEnd", new object[] {
                        accessToken,
                        transferToken}, asyncCallback, userState);
        }
        
        public bool EndUploadFileEnd(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("UploadFileEnd", args, result)));
        }
        
        public int DownloadFileStart(string accessToken, string transferToken, int chunkSize) {
            object[] args = new object[] {
                    accessToken,
                    transferToken,
                    chunkSize};
            return ((int)(base.Invoke("DownloadFileStart", args)));
        }
        
        public System.IAsyncResult BeginDownloadFileStart(string accessToken, string transferToken, int chunkSize, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("DownloadFileStart", new object[] {
                        accessToken,
                        transferToken,
                        chunkSize}, asyncCallback, userState);
        }
        
        public int EndDownloadFileStart(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((int)(base.EndInvoke("DownloadFileStart", args, result)));
        }
        
        public byte[] DownloadFilePart(string accessToken, string transferToken, int chunkIndex) {
            object[] args = new object[] {
                    accessToken,
                    transferToken,
                    chunkIndex};
            return ((byte[])(base.Invoke("DownloadFilePart", args)));
        }
        
        public System.IAsyncResult BeginDownloadFilePart(string accessToken, string transferToken, int chunkIndex, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("DownloadFilePart", new object[] {
                        accessToken,
                        transferToken,
                        chunkIndex}, asyncCallback, userState);
        }
        
        public byte[] EndDownloadFilePart(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((byte[])(base.EndInvoke("DownloadFilePart", args, result)));
        }
        
        public bool DownloadFileCancel(string accessToken, string transferToken) {
            object[] args = new object[] {
                    accessToken,
                    transferToken};
            return ((bool)(base.Invoke("DownloadFileCancel", args)));
        }
        
        public System.IAsyncResult BeginDownloadFileCancel(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("DownloadFileCancel", new object[] {
                        accessToken,
                        transferToken}, asyncCallback, userState);
        }
        
        public bool EndDownloadFileCancel(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("DownloadFileCancel", args, result)));
        }
        
        public bool DownloadFileEnd(string accessToken, string transferToken) {
            object[] args = new object[] {
                    accessToken,
                    transferToken};
            return ((bool)(base.Invoke("DownloadFileEnd", args)));
        }
        
        public System.IAsyncResult BeginDownloadFileEnd(string accessToken, string transferToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("DownloadFileEnd", new object[] {
                        accessToken,
                        transferToken}, asyncCallback, userState);
        }
        
        public bool EndDownloadFileEnd(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((bool)(base.EndInvoke("DownloadFileEnd", args, result)));
        }
        
        public string[] GetLogDirectoryNames(string accessToken) {
            object[] args = new object[] {
                    accessToken};
            return ((string[])(base.Invoke("GetLogDirectoryNames", args)));
        }
        
        public System.IAsyncResult BeginGetLogDirectoryNames(string accessToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetLogDirectoryNames", new object[] {
                        accessToken}, asyncCallback, userState);
        }
        
        public string[] EndGetLogDirectoryNames(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string[])(base.EndInvoke("GetLogDirectoryNames", args, result)));
        }
        
        public string GetCurrentLogDirectoryName(string accessToken) {
            object[] args = new object[] {
                    accessToken};
            return ((string)(base.Invoke("GetCurrentLogDirectoryName", args)));
        }
        
        public System.IAsyncResult BeginGetCurrentLogDirectoryName(string accessToken, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetCurrentLogDirectoryName", new object[] {
                        accessToken}, asyncCallback, userState);
        }
        
        public string EndGetCurrentLogDirectoryName(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("GetCurrentLogDirectoryName", args, result)));
        }
        
        public string[] GetLogFileNames(string accessToken, string logDirectoryName) {
            object[] args = new object[] {
                    accessToken,
                    logDirectoryName};
            return ((string[])(base.Invoke("GetLogFileNames", args)));
        }
        
        public System.IAsyncResult BeginGetLogFileNames(string accessToken, string logDirectoryName, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("GetLogFileNames", new object[] {
                        accessToken,
                        logDirectoryName}, asyncCallback, userState);
        }
        
        public string[] EndGetLogFileNames(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string[])(base.EndInvoke("GetLogFileNames", args, result)));
        }
        
        public string QueueLogFileDownload(string accessToken, string directoryName, string fileName) {
            object[] args = new object[] {
                    accessToken,
                    directoryName,
                    fileName};
            return ((string)(base.Invoke("QueueLogFileDownload", args)));
        }
        
        public System.IAsyncResult BeginQueueLogFileDownload(string accessToken, string directoryName, string fileName, System.AsyncCallback asyncCallback, object userState) {
            return base.BeginInvoke("QueueLogFileDownload", new object[] {
                        accessToken,
                        directoryName,
                        fileName}, asyncCallback, userState);
        }
        
        public string EndQueueLogFileDownload(System.IAsyncResult result) {
            object[] args = new object[0];
            return ((string)(base.EndInvoke("QueueLogFileDownload", args, result)));
        }
    }
}

public class EchoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public EchoCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class GetOrderIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrderIDsCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int[] Result {
        get {
            return ((int[])(this.results[0]));
        }
    }
}

public class GetOrderIDsByCustomerLastNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrderIDsByCustomerLastNameCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int[] Result {
        get {
            return ((int[])(this.results[0]));
        }
    }
}

public class GetOrderIDsByDateRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrderIDsByDateRangeCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int[] Result {
        get {
            return ((int[])(this.results[0]));
        }
    }
}

public class GetOrderIDsByStoreNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrderIDsByStoreNumberCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int[] Result {
        get {
            return ((int[])(this.results[0]));
        }
    }
}

public class GetOrderIDsByMultipleCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrderIDsByMultipleCriteriaCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int[] Result {
        get {
            return ((int[])(this.results[0]));
        }
    }
}

public class GetOrdersByPONumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrdersByPONumberCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int[] Result {
        get {
            return ((int[])(this.results[0]));
        }
    }
}

public class GetOrderByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetOrderByIDCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public CFI.OrderInfo Result {
        get {
            return ((CFI.OrderInfo)(this.results[0]));
        }
    }
}

public class GetAllNoteTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetAllNoteTypesCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class AddNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public AddNoteCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class GetNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetNoteCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public CFI.NoteInfo Result {
        get {
            return ((CFI.NoteInfo)(this.results[0]));
        }
    }
}

public class GetNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetNotesCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class UpdateNoteTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public UpdateNoteTextCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class DeleteNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public DeleteNoteCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetAllUsersCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class AddPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public AddPhotoCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class QueuePhotoDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public QueuePhotoDownloadCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class GetPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetPhotoCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public CFI.PhotoInfo Result {
        get {
            return ((CFI.PhotoInfo)(this.results[0]));
        }
    }
}

public class GetPhotosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetPhotosCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class DeletePhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public DeletePhotoCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class QueueDiagramDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public QueueDiagramDownloadCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class UploadFileStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public UploadFileStartCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class UploadFilePartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public UploadFilePartCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class UploadFileCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public UploadFileCancelCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class UploadFileEndCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public UploadFileEndCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class DownloadFileStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public DownloadFileStartCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public int Result {
        get {
            return ((int)(this.results[0]));
        }
    }
}

public class DownloadFilePartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public DownloadFilePartCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public byte[] Result {
        get {
            return ((byte[])(this.results[0]));
        }
    }
}

public class DownloadFileCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public DownloadFileCancelCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class DownloadFileEndCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public DownloadFileEndCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            return ((bool)(this.results[0]));
        }
    }
}

public class GetLogDirectoryNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetLogDirectoryNamesCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            return ((string[])(this.results[0]));
        }
    }
}

public class GetCurrentLogDirectoryNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetCurrentLogDirectoryNameCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}

public class GetLogFileNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public GetLogFileNamesCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            return ((string[])(this.results[0]));
        }
    }
}

public class QueueLogFileDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public QueueLogFileDownloadCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            return ((string)(this.results[0]));
        }
    }
}
